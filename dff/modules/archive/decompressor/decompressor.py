# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_decompressor', [dirname(__file__)])
        except ImportError:
            import _decompressor
            return _decompressor
        if fp is not None:
            try:
                _mod = imp.load_module('_decompressor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _decompressor = swig_import_helper()
    del swig_import_helper
else:
    import _decompressor
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import dff.api.vfs.libvfs
import dff.api.exceptions.libexceptions
import dff.api.types.libtypes
import dff.api.events.libevents
ArchiveDataBufferSize = _decompressor.ArchiveDataBufferSize
class DecompressorFdinfo(dff.api.vfs.libvfs.fdinfo):
    """1"""
    __swig_setmethods__ = {}
    for _s in [dff.api.vfs.libvfs.fdinfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecompressorFdinfo, name, value)
    __swig_getmethods__ = {}
    for _s in [dff.api.vfs.libvfs.fdinfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecompressorFdinfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(DecompressorFdinfo self) -> DecompressorFdinfo

        1
        """
        this = _decompressor.new_DecompressorFdinfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["arch"] = _decompressor.DecompressorFdinfo_arch_set
    __swig_getmethods__["arch"] = _decompressor.DecompressorFdinfo_arch_get
    if _newclass:arch = _swig_property(_decompressor.DecompressorFdinfo_arch_get, _decompressor.DecompressorFdinfo_arch_set)
    __swig_setmethods__["archiveReadOffset"] = _decompressor.DecompressorFdinfo_archiveReadOffset_set
    __swig_getmethods__["archiveReadOffset"] = _decompressor.DecompressorFdinfo_archiveReadOffset_get
    if _newclass:archiveReadOffset = _swig_property(_decompressor.DecompressorFdinfo_archiveReadOffset_get, _decompressor.DecompressorFdinfo_archiveReadOffset_set)
    __swig_destroy__ = _decompressor.delete_DecompressorFdinfo
    __del__ = lambda self : None;
DecompressorFdinfo_swigregister = _decompressor.DecompressorFdinfo_swigregister
DecompressorFdinfo_swigregister(DecompressorFdinfo)

class ArchiveData(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(ArchiveData self, Node node) -> ArchiveData

        1
        """
        this = _decompressor.new_ArchiveData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _decompressor.delete_ArchiveData
    __del__ = lambda self : None;
    __swig_setmethods__["node"] = _decompressor.ArchiveData_node_set
    __swig_getmethods__["node"] = _decompressor.ArchiveData_node_get
    if _newclass:node = _swig_property(_decompressor.ArchiveData_node_get, _decompressor.ArchiveData_node_set)
    __swig_setmethods__["vfile"] = _decompressor.ArchiveData_vfile_set
    __swig_getmethods__["vfile"] = _decompressor.ArchiveData_vfile_get
    if _newclass:vfile = _swig_property(_decompressor.ArchiveData_vfile_get, _decompressor.ArchiveData_vfile_set)
    __swig_setmethods__["buffer"] = _decompressor.ArchiveData_buffer_set
    __swig_getmethods__["buffer"] = _decompressor.ArchiveData_buffer_get
    if _newclass:buffer = _swig_property(_decompressor.ArchiveData_buffer_get, _decompressor.ArchiveData_buffer_set)
ArchiveData_swigregister = _decompressor.ArchiveData_swigregister
ArchiveData_swigregister(ArchiveData)

class Decompressor(dff.api.vfs.libvfs.fso):
    """1"""
    __swig_setmethods__ = {}
    for _s in [dff.api.vfs.libvfs.fso]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decompressor, name, value)
    __swig_getmethods__ = {}
    for _s in [dff.api.vfs.libvfs.fso]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Decompressor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(Decompressor self) -> Decompressor

        1
        """
        this = _decompressor.new_Decompressor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _decompressor.delete_Decompressor
    __del__ = lambda self : None;
    def start(self, *args):
        """
        start(Decompressor self, VMap args)

        This method is called when the module starts. It does the job the module
        is supposed to do. This method is declared as a pure virtual so each modules
        must reiplements it (see the developer's documentations for more details) in
        python or C++, depending on which language you choose.

        The parameter 'args' is a pointer to the arguments list which were passed to the
        module when it was launched. You can get them by using the method
         args->get("arg_name", &variable)
        where variable must be of the same type than the argument "arg_name"

        If you create nodes, you must not forget to call the method register_tree at
        the end of the module execution.

        If an error occured while getting a parameter, a envError exception is thrown.

        Params :
                * args : the list of arguments passed to the module.


        """
        return _decompressor.Decompressor_start(self, *args)

    def newArchive(self):
        """
        newArchive(Decompressor self) -> archive *

        1
        """
        return _decompressor.Decompressor_newArchive(self)

    def createNodeTree(self, *args):
        """
        createNodeTree(Decompressor self, archive * archiv)

        1
        """
        return _decompressor.Decompressor_createNodeTree(self, *args)

    def openNodeArchive(self, *args):
        """
        openNodeArchive(Decompressor self, Node node) -> archive *

        1
        """
        return _decompressor.Decompressor_openNodeArchive(self, *args)

    def vopen(self, *args):
        """
        vopen(Decompressor self, Node n) -> int32_t

        Open a node.

        Param :
                * n : the node you want to open

        Return the opened file descriptor, or 0 if it failed.

        """
        return _decompressor.Decompressor_vopen(self, *args)

    def vread(self, *args):
        """
        vread(Decompressor self, int32_t fd, void * rbuff, uint32_t size) -> int32_t

        vread(self, int32_t fd, void rbuff, uint32_t size) -> int32_t

        Perform readings on an open node and returns the number of bytes which wereread.

        Params :
                * fd : the file descriptor of the node you want to read on.
                * rbuff : a pointer to an allocated buffer where the read bytes will be stored
                * size : the number of characters you want to read.

        Return the number of read characters.

        """
        return _decompressor.Decompressor_vread(self, *args)

    def vseek(self, *args):
        """
        vseek(Decompressor self, int32_t fd, uint64_t offset, int32_t whence) -> uint64_t

        vseek(self, int32_t fd, uint64_t offset, int32_t whence) -> uint64_t

        This method is used to change position within an open node (i.e. modifies the
        offset of the current position). The offset is set to 0 when the file is open.

        Throws a vfsError if something goes wrong (typically if the seeking position is
        after the end of the file).

        It takes three parameters :
                * a file descriptor of an open node
                * the offset where you want to seek
                * the third parameter is optional : it defines if the offset passed in second parameter is absolute or relative.

        Return an uint64_t

        """
        return _decompressor.Decompressor_vseek(self, *args)

    def status(self):
        """
        status(Decompressor self) -> uint32_t

        Return the status of the module.

        """
        return _decompressor.Decompressor_status(self)

    def vtell(self, *args):
        """
        vtell(Decompressor self, int32_t fd) -> uint64_t

        Returns the current offset in a file.

        """
        return _decompressor.Decompressor_vtell(self, *args)

    def vclose(self, *args):
        """
        vclose(Decompressor self, int32_t fd) -> int32_t

        Close an open file descriptor and make it available again for others
        openings.

        Return `0` if everything went fine, `0` otherwise.

        """
        return _decompressor.Decompressor_vclose(self, *args)

    def vwrite(self, *args):
        """
        vwrite(Decompressor self, int fd, void * buff, unsigned int size) -> int32_t

        Not used.

        """
        return _decompressor.Decompressor_vwrite(self, *args)

    def setStateInfo(self, *args):
        """
        setStateInfo(Decompressor self, std::string const & arg2)

        1
        """
        return _decompressor.Decompressor_setStateInfo(self, *args)

    def rootNode(self):
        """
        rootNode(Decompressor self) -> Node

        1
        """
        return _decompressor.Decompressor_rootNode(self)

    def archiveOpen(*args):
        """
        archiveOpen(archive * arg1, void * dffarchivedata) -> int

        1
        """
        return _decompressor.Decompressor_archiveOpen(*args)

    if _newclass:archiveOpen = staticmethod(archiveOpen)
    __swig_getmethods__["archiveOpen"] = lambda x: archiveOpen
    def archiveRead(*args):
        """
        archiveRead(archive * arg1, void * dffarchivedata, void const ** _buffer) -> ssize_t

        1
        """
        return _decompressor.Decompressor_archiveRead(*args)

    if _newclass:archiveRead = staticmethod(archiveRead)
    __swig_getmethods__["archiveRead"] = lambda x: archiveRead
    def archiveSeek(*args):
        """
        archiveSeek(archive * arg1, void * dffarchivedata, int64_t offset, int whence) -> int64_t

        1
        """
        return _decompressor.Decompressor_archiveSeek(*args)

    if _newclass:archiveSeek = staticmethod(archiveSeek)
    __swig_getmethods__["archiveSeek"] = lambda x: archiveSeek
    def archiveClose(*args):
        """
        archiveClose(archive * arg1, void * dffarchivedata) -> int

        1
        """
        return _decompressor.Decompressor_archiveClose(*args)

    if _newclass:archiveClose = staticmethod(archiveClose)
    __swig_getmethods__["archiveClose"] = lambda x: archiveClose
Decompressor_swigregister = _decompressor.Decompressor_swigregister
Decompressor_swigregister(Decompressor)

def Decompressor_archiveOpen(*args):
  """
    Decompressor_archiveOpen(archive * arg1, void * dffarchivedata) -> int

    1
    """
  return _decompressor.Decompressor_archiveOpen(*args)

def Decompressor_archiveRead(*args):
  """
    Decompressor_archiveRead(archive * arg1, void * dffarchivedata, void const ** _buffer) -> ssize_t

    1
    """
  return _decompressor.Decompressor_archiveRead(*args)

def Decompressor_archiveSeek(*args):
  """
    Decompressor_archiveSeek(archive * arg1, void * dffarchivedata, int64_t offset, int whence) -> int64_t

    1
    """
  return _decompressor.Decompressor_archiveSeek(*args)

def Decompressor_archiveClose(*args):
  """
    Decompressor_archiveClose(archive * arg1, void * dffarchivedata) -> int

    1
    """
  return _decompressor.Decompressor_archiveClose(*args)

from dff.api.module.module import * 
from dff.api.types.libtypes import * 

class decompressor(Module):
  def __init__(self):
    Module.__init__(self, 'uncompress', Decompressor)
    self.conf.addArgument({"name": "file",
                           "description": "Path to an archive or compressed file",
                           "input": Argument.Required|Argument.Single|typeId.Node})
    self.conf.addConstant({"name": "mime-type",
                           "description": "managed mime type",
                           "type" : typeId.String,
                           "values" : ["archive/zip", "archive/rar", "archive/tar", "archive/cab", "archive/7zip", "archive/bzip2", "archive/gzip", "archive/lzma", "archive/cpio", "archive/xz", "archive/lzip", "archive/zlib", "filesystem/iso9660"]}) #filetype .iso because is not detect by magic as buffer is too small 0x2000 and need more than 0x8000 for iso 
    self.conf.description = "Unarchive & decompress zip, rar, cab, 7zip, iso9660, tar, ..."
    self.tags = "Archive"

# This file is compatible with both classic and new-style classes.


