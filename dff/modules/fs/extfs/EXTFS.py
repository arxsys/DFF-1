# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EXTFS', [dirname(__file__)])
        except ImportError:
            import _EXTFS
            return _EXTFS
        if fp is not None:
            try:
                _mod = imp.load_module('_EXTFS', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EXTFS = swig_import_helper()
    del swig_import_helper
else:
    import _EXTFS
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _EXTFS.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _EXTFS.SwigPyIterator_value(self)
    def incr(self, n=1): return _EXTFS.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _EXTFS.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _EXTFS.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _EXTFS.SwigPyIterator_equal(self, *args)
    def copy(self): return _EXTFS.SwigPyIterator_copy(self)
    def next(self): return _EXTFS.SwigPyIterator_next(self)
    def __next__(self): return _EXTFS.SwigPyIterator___next__(self)
    def previous(self): return _EXTFS.SwigPyIterator_previous(self)
    def advance(self, *args): return _EXTFS.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _EXTFS.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _EXTFS.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _EXTFS.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _EXTFS.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _EXTFS.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _EXTFS.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _EXTFS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import dff.api.vfs.libvfs
import dff.api.exceptions.libexceptions
import dff.api.types.libtypes
import dff.api.events.libevents
DRIVER_NAME = _EXTFS.DRIVER_NAME
ROOT_INODE = _EXTFS.ROOT_INODE
class Extfs(dff.api.vfs.libvfs.mfso):
    """1"""
    __swig_setmethods__ = {}
    for _s in [dff.api.vfs.libvfs.mfso]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Extfs, name, value)
    __swig_getmethods__ = {}
    for _s in [dff.api.vfs.libvfs.mfso]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Extfs, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(Extfs self) -> Extfs

        1
        """
        this = _EXTFS.new_Extfs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _EXTFS.delete_Extfs
    __del__ = lambda self : None;
    def start(self, *args):
        """
        start(Extfs self, VMap args)

        start(self, argument args)

        This method is pure virtual in mfso so musts be implemented while developing
        a module.

        This method is called when the module starts. It does the job the module
        is supposed to do. This method is declared as a pure virtual so each modules
        must reiplements it (see the developer's documentations for more details) in
        python or C++, depending on which language you choose.

        The parameter 'args' is pointer to the arguments list which were passed to the
        module when it was launched. You can get them by using the method

          args->get("arg_name", &variable)

        where variable must be of the same type than the argument "arg_name"

        If you create nodes, you must not forget to call the method register_tree at
        the end of the module execution.

        If an error occured while getting a parameter, a envError exception is thrown.

        Params :
                * args : the list of arguments.


        """
        return _EXTFS.Extfs_start(self, *args)

    def launch(self, *args):
        """
        launch(Extfs self, VMap args)

        1
        """
        return _EXTFS.Extfs_launch(self, *args)

    def init(self, *args):
        """
        init(Extfs self, bool sb_check, uint64_t sb_force_addr)

        1
        """
        return _EXTFS.Extfs_init(self, *args)

    def run(self, *args):
        """
        run(Extfs self, uint64_t root_i_nb)

        1
        """
        return _EXTFS.Extfs_run(self, *args)

    def createVfsNode(self, *args):
        """
        createVfsNode(Extfs self, Node * parent, std::string name, uint64_t id, inodes_t * inode) -> ExtfsNode *

        1
        """
        return _EXTFS.Extfs_createVfsNode(self, *args)

    def vfile(self):
        """
        vfile(Extfs self) -> VFile *

        1
        """
        return _EXTFS.Extfs_vfile(self)

    def GD(self):
        """
        GD(Extfs self) -> GroupDescriptor *

        1
        """
        return _EXTFS.Extfs_GD(self)

    def SB(self):
        """
        SB(Extfs self) -> SuperBlock *

        1
        """
        return _EXTFS.Extfs_SB(self)

    def v_seek_read(self, *args):
        """
        v_seek_read(Extfs self, uint64_t addr, void * buf, uint64_t size)

        1
        """
        return _EXTFS.Extfs_v_seek_read(self, *args)

    def node(self):
        """
        node(Extfs self) -> Node *

        1
        """
        return _EXTFS.Extfs_node(self)

    def orphans(self):
        """
        orphans(Extfs self) -> ExtfsNode *

        1
        """
        return _EXTFS.Extfs_orphans(self)

    def suspiscious_inodes(self):
        """
        suspiscious_inodes(Extfs self) -> ExtfsNode *

        1
        """
        return _EXTFS.Extfs_suspiscious_inodes(self)

    def slack(self):
        """
        slack(Extfs self) -> bool

        1
        """
        return _EXTFS.Extfs_slack(self)

    def suspiscious_dir(self):
        """
        suspiscious_dir(Extfs self) -> ExtfsNode *

        1
        """
        return _EXTFS.Extfs_suspiscious_dir(self)

    def nb_parsed_inode(self):
        """
        nb_parsed_inode(Extfs self) -> uint32_t

        1
        """
        return _EXTFS.Extfs_nb_parsed_inode(self)

    def for_aiur(self):
        """
        for_aiur(Extfs self)

        1
        """
        return _EXTFS.Extfs_for_aiur(self)

    def alloc_inode(self):
        """
        alloc_inode(Extfs self) -> uint32_t

        1
        """
        return _EXTFS.Extfs_alloc_inode(self)

    def createSlack(self, *args):
        """
        createSlack(Extfs self, Node * node, uint64_t addr)

        1
        """
        return _EXTFS.Extfs_createSlack(self, *args)

    __swig_setmethods__["addBlockPointers"] = _EXTFS.Extfs_addBlockPointers_set
    __swig_getmethods__["addBlockPointers"] = _EXTFS.Extfs_addBlockPointers_get
    if _newclass:addBlockPointers = _swig_property(_EXTFS.Extfs_addBlockPointers_get, _EXTFS.Extfs_addBlockPointers_set)
    __swig_setmethods__["attributeHandler"] = _EXTFS.Extfs_attributeHandler_set
    __swig_getmethods__["attributeHandler"] = _EXTFS.Extfs_attributeHandler_get
    if _newclass:attributeHandler = _swig_property(_EXTFS.Extfs_attributeHandler_get, _EXTFS.Extfs_attributeHandler_set)
Extfs_swigregister = _EXTFS.Extfs_swigregister
Extfs_swigregister(Extfs)

__dff_module_extfs_version__ = "1.0.0"

from dff.api.module.module import *
from dff.api.types.libtypes import Argument, typeId, Parameter

class EXTFS(Module):
  """This module parses extented file system (EXT 2/3/4) and tries to recover deleted data."""
  def __init__(self):

    Module.__init__(self, 'extfs', Extfs)

    self.conf.addArgument({"name": "file",
                           "description": "file containing an EXT 2, 3 or 4 file system",
                           "input": Argument.Required|Argument.Single|typeId.Node})

    self.conf.addArgument({"name": "blockpointers",
                           "description": "Add block pointer as extfs extended attributes",
                           "input": Argument.Empty})

    self.conf.addArgument({"name": "dont_parse_fs",
                           "description": "Parse the entire file system.",
                           "input": Argument.Empty})

    self.conf.addArgument({"name": "ils",
                           "description": "List inodes",
                           "input": Argument.Optional|typeId.String|Argument.Single,
                           "parameters":{"type":Parameter.Editable}
                         })

    self.conf.addArgument({"name": "blk",
                           "description": "Block allocation status",
                           "input": Argument.Optional|typeId.String|Argument.Single,
                           "parameters":{"type":Parameter.Editable}
                          })

    self.conf.addArgument({"name": "fsstat",
                           "description": "File system statistic",
                           "input": Argument.Empty})

    self.conf.addArgument({"name": "istat",
                           "description": "Inode statistics",
                           "input": Argument.Optional|typeId.String|Argument.Single,
                           "parameters": {"type": Parameter.Editable}
                          })

    self.conf.addArgument({"name": "fsck",
                           "description": "check if the number of allocated block matches inode's size",
                           "input": Argument.Empty})
  

    self.conf.addArgument({"name": "jstat",
                           "description": "journal statistics",
                           "input": Argument.Empty})

    self.conf.addArgument({"name": "slack",
                           "description": "Create slack nodes",
                           "input": Argument.Empty})

    self.conf.addArgument({"name": "SB_check",
                           "description": "check superblock validity",
                           "input": Argument.Empty})

    self.conf.addArgument({"name": "i_orphans",
                           "description": "Parse orphan inodes",
                           "input": Argument.Empty})

    self.conf.addArgument({"name": "root_inode",
                           "description": "Root inode number",
                           "input": Argument.Optional|Argument.Single|typeId.UInt64,
                           "parameters": {"type": Parameter.Editable,
                                          "predefined": [2]}
                           })

    self.conf.addArgument({"name": "SB_addr",
                           "description": "Super block address specified manualy",
                           "input": Argument.Optional|Argument.Single|typeId.UInt64,
                           "parameters": {"type": Parameter.Editable,
                                          "predefined": [1024]}
                           })

    self.conf.addConstant({"name": "mime-type", 
                           "type": typeId.String,
                           "description": "managed mime type",
                           "values": ["filesystem/ext"]})
    self.tags = "File systems"

# This file is compatible with both classic and new-style classes.


