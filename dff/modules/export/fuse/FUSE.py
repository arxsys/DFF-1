# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FUSE', [dirname(__file__)])
        except ImportError:
            import _FUSE
            return _FUSE
        if fp is not None:
            try:
                _mod = imp.load_module('_FUSE', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _FUSE = swig_import_helper()
    del swig_import_helper
else:
    import _FUSE
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FUSE.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _FUSE.SwigPyIterator_value(self)
    def incr(self, n=1): return _FUSE.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _FUSE.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _FUSE.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _FUSE.SwigPyIterator_equal(self, *args)
    def copy(self): return _FUSE.SwigPyIterator_copy(self)
    def next(self): return _FUSE.SwigPyIterator_next(self)
    def __next__(self): return _FUSE.SwigPyIterator___next__(self)
    def previous(self): return _FUSE.SwigPyIterator_previous(self)
    def advance(self, *args): return _FUSE.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _FUSE.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _FUSE.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _FUSE.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _FUSE.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _FUSE.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _FUSE.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _FUSE.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import dff.api.vfs.libvfs
import dff.api.exceptions.libexceptions
import dff.api.types.libtypes
import dff.api.events.libevents
FUSE_USE_VERSION = _FUSE.FUSE_USE_VERSION
class fuse(dff.api.vfs.libvfs.mfso):
    """1"""
    __swig_setmethods__ = {}
    for _s in [dff.api.vfs.libvfs.mfso]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fuse, name, value)
    __swig_getmethods__ = {}
    for _s in [dff.api.vfs.libvfs.mfso]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, fuse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(fuse self) -> fuse

        1
        """
        this = _FUSE.new_fuse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FUSE.delete_fuse
    __del__ = lambda self : None;
    def start(self, *args):
        """
        start(fuse self, VMap args)

        start(self, argument args)

        This method is pure virtual in mfso so musts be implemented while developing
        a module.

        This method is called when the module starts. It does the job the module
        is supposed to do. This method is declared as a pure virtual so each modules
        must reiplements it (see the developer's documentations for more details) in
        python or C++, depending on which language you choose.

        The parameter 'args' is pointer to the arguments list which were passed to the
        module when it was launched. You can get them by using the method

          args->get("arg_name", &variable)

        where variable must be of the same type than the argument "arg_name"

        If you create nodes, you must not forget to call the method register_tree at
        the end of the module execution.

        If an error occured while getting a parameter, a envError exception is thrown.

        Params :
                * args : the list of arguments.


        """
        return _FUSE.fuse_start(self, *args)

fuse_swigregister = _FUSE.fuse_swigregister
fuse_swigregister(fuse)

__dff_module_fuse_version__ = "1.0.0"

from dff.api.module.module import Module
from dff.api.types.libtypes import Argument, typeId

class FUSE(Module):
  """Mount DFF VFS directly on your system and use your traditional browser and tools on files"""
  def __init__(self):
    Module.__init__(self, 'fuse', fuse)
    self.conf.addArgument({"input": Argument.Required|Argument.Single|typeId.Path,
                           "name": "path",
                           "description":"Path where to mount DFF VFS in system."})
    self.conf.addArgument({"input": Argument.Optional|Argument.Single|typeId.String,
                           "name": "mount_options",
	                    "description": """Specify fuse mount options. By default allow_other is set but be sure to 
                            have user_allow_other in /etc/fuse.conf If you want other to be able to browse the mount point.
                            By setting this argument your options will be used and though allow_other will be disable.
                           """})
    self.tags = "Export"

# This file is compatible with both classic and new-style classes.


