# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PARTITION', [dirname(__file__)])
        except ImportError:
            import _PARTITION
            return _PARTITION
        if fp is not None:
            try:
                _mod = imp.load_module('_PARTITION', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PARTITION = swig_import_helper()
    del swig_import_helper
else:
    import _PARTITION
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PARTITION.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _PARTITION.SwigPyIterator_value(self)
    def incr(self, n=1): return _PARTITION.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _PARTITION.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _PARTITION.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _PARTITION.SwigPyIterator_equal(self, *args)
    def copy(self): return _PARTITION.SwigPyIterator_copy(self)
    def next(self): return _PARTITION.SwigPyIterator_next(self)
    def __next__(self): return _PARTITION.SwigPyIterator___next__(self)
    def previous(self): return _PARTITION.SwigPyIterator_previous(self)
    def advance(self, *args): return _PARTITION.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _PARTITION.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _PARTITION.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _PARTITION.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _PARTITION.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _PARTITION.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _PARTITION.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _PARTITION.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import dff.api.vfs.libvfs
import dff.api.exceptions.libexceptions
import dff.api.types.libtypes
import dff.api.events.libevents
class Partition(dff.api.vfs.libvfs.mfso):
    """1"""
    __swig_setmethods__ = {}
    for _s in [dff.api.vfs.libvfs.mfso]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Partition, name, value)
    __swig_getmethods__ = {}
    for _s in [dff.api.vfs.libvfs.mfso]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Partition, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(Partition self) -> Partition

        1
        """
        this = _PARTITION.new_Partition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PARTITION.delete_Partition
    __del__ = lambda self : None;
    def start(self, *args):
        """
        start(Partition self, VMap args)

        start(self, argument args)

        This method is pure virtual in mfso so musts be implemented while developing
        a module.

        This method is called when the module starts. It does the job the module
        is supposed to do. This method is declared as a pure virtual so each modules
        must reiplements it (see the developer's documentations for more details) in
        python or C++, depending on which language you choose.

        The parameter 'args' is pointer to the arguments list which were passed to the
        module when it was launched. You can get them by using the method

          args->get("arg_name", &variable)

        where variable must be of the same type than the argument "arg_name"

        If you create nodes, you must not forget to call the method register_tree at
        the end of the module execution.

        If an error occured while getting a parameter, a envError exception is thrown.

        Params :
                * args : the list of arguments.


        """
        return _PARTITION.Partition_start(self, *args)

Partition_swigregister = _PARTITION.Partition_swigregister
Partition_swigregister(Partition)

class PartitionsNode(dff.api.vfs.libvfs.Node):
    """1"""
    __swig_setmethods__ = {}
    for _s in [dff.api.vfs.libvfs.Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartitionsNode, name, value)
    __swig_getmethods__ = {}
    for _s in [dff.api.vfs.libvfs.Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartitionsNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(PartitionsNode self, Partition fsobj) -> PartitionsNode

        1
        """
        this = _PARTITION.new_PartitionsNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PARTITION.delete_PartitionsNode
    __del__ = lambda self : None;
    def icon(self):
        """
        icon(PartitionsNode self) -> std::string

        1
        """
        return _PARTITION.PartitionsNode_icon(self)

    def _attributes(self):
        """
        _attributes(PartitionsNode self) -> Attributes

        1
        """
        return _PARTITION.PartitionsNode__attributes(self)

PartitionsNode_swigregister = _PARTITION.PartitionsNode_swigregister
PartitionsNode_swigregister(PartitionsNode)

__dff_module_partition_version__ = "1.0.0"

from dff.api.module.module import *
from dff.api.types.libtypes import Argument, typeId, Parameter

class PARTITION(Module):
  """Reconstructs partitions found in provided files"""
  def __init__(self):
    Module.__init__(self, 'partition', Partition)
    self.conf.addArgument({"name": "file",
                           "description": "file containing one or more partition(s)",
                           "input": Argument.Required|Argument.Single|typeId.Node})

    self.conf.addArgument({"name": "sector-size",
                           "description": "The size of sectors in bytes (default is 512)",
                           "input": Argument.Optional|Argument.Single|typeId.UInt32,
                           "parameters": {"type": Parameter.Editable,
                                          "predefined": [512, 4096]}
                           })

    self.conf.addArgument({"name": "offset",
                           "description": "offset where the volume containing the partition is located",
                           "input": Argument.Optional|Argument.Single|typeId.UInt64})

    self.conf.addArgument({"name": "force",
                           "description": "force the module to process partition entries even if provided file is smaller than resulting partitions",
                           "input": Argument.Empty})

    self.conf.addConstant({"name": "mime-type", 
                           "type": typeId.String,
                           "description": "managed mime type",
                           "values": ["volume/dos-partition", "volume/gpt"]})
    self.tags = "Volumes"
    self.icon = ":disksfilesystems"

# This file is compatible with both classic and new-style classes.


