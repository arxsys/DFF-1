# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsearch', [dirname(__file__)])
        except ImportError:
            import _libsearch
            return _libsearch
        if fp is not None:
            try:
                _mod = imp.load_module('_libsearch', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsearch = swig_import_helper()
    del swig_import_helper
else:
    import _libsearch
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsearch.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        1
        """
        return _libsearch.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libsearch.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        1
        """
        return _libsearch.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator_copy(self)

    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        1
        """
        return _libsearch.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        1
        """
        return _libsearch.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        1
        """
        return _libsearch.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        1
        """
        return _libsearch.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        1
        """
        return _libsearch.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libsearch.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libsearch.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _libsearch.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FastSearch(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FastSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FastSearch, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(DFF::FastSearch self) -> FastSearch

        1
        """
        this = _libsearch.new_FastSearch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsearch.delete_FastSearch
    __del__ = lambda self : None;
    def find(self, *args):
        """
        find(FastSearch self, unsigned char * haystack, unsigned char * needle, unsigned char wildcard='\0') -> int32_t
        find(FastSearch self, unsigned char * haystack, unsigned char * needle) -> int32_t

        1
        """
        return _libsearch.FastSearch_find(self, *args)

    def rfind(self, *args):
        """
        rfind(FastSearch self, unsigned char * haystack, unsigned char * needle, unsigned char wildcard='\0') -> int32_t
        rfind(FastSearch self, unsigned char * haystack, unsigned char * needle) -> int32_t

        1
        """
        return _libsearch.FastSearch_rfind(self, *args)

    def count(self, *args):
        """
        count(FastSearch self, unsigned char * haystack, unsigned char * needle, unsigned char wildcard='\0', int32_t maxcount=-1) -> int32_t
        count(FastSearch self, unsigned char * haystack, unsigned char * needle, unsigned char wildcard='\0') -> int32_t
        count(FastSearch self, unsigned char * haystack, unsigned char * needle) -> int32_t

        1
        """
        return _libsearch.FastSearch_count(self, *args)

FastSearch_swigregister = _libsearch.FastSearch_swigregister
FastSearch_swigregister(FastSearch)

class Search(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Search, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Search, name)
    __repr__ = _swig_repr
    Fixed = _libsearch.Search_Fixed
    Wildcard = _libsearch.Search_Wildcard
    Regexp = _libsearch.Search_Regexp
    Fuzzy = _libsearch.Search_Fuzzy
    CaseInsensitive = _libsearch.Search_CaseInsensitive
    CaseSensitive = _libsearch.Search_CaseSensitive
    def __init__(self, *args): 
        """
        __init__(DFF::Search self) -> Search
        __init__(DFF::Search self, std::string pattern, DFF::Search::CaseSensitivity cs=CaseSensitive, DFF::Search::PatternSyntax syntax=Fixed) -> Search
        __init__(DFF::Search self, std::string pattern, DFF::Search::CaseSensitivity cs=CaseSensitive) -> Search
        __init__(DFF::Search self, std::string pattern) -> Search

        1
        """
        this = _libsearch.new_Search(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsearch.delete_Search
    __del__ = lambda self : None;
    def needleLength(self):
        """
        needleLength(Search self) -> uint32_t

        1
        """
        return _libsearch.Search_needleLength(self)

    def setPattern(self, *args):
        """
        setPattern(Search self, std::string pattern)

        1
        """
        return _libsearch.Search_setPattern(self, *args)

    def pattern(self):
        """
        pattern(Search self) -> std::string

        1
        """
        return _libsearch.Search_pattern(self)

    def setPatternSyntax(self, *args):
        """
        setPatternSyntax(Search self, DFF::Search::PatternSyntax syntax)

        1
        """
        return _libsearch.Search_setPatternSyntax(self, *args)

    def patternSyntax(self):
        """
        patternSyntax(Search self) -> DFF::Search::PatternSyntax

        1
        """
        return _libsearch.Search_patternSyntax(self)

    def setCaseSensitivity(self, *args):
        """
        setCaseSensitivity(Search self, DFF::Search::CaseSensitivity cs)

        1
        """
        return _libsearch.Search_setCaseSensitivity(self, *args)

    def caseSensitivity(self):
        """
        caseSensitivity(Search self) -> DFF::Search::CaseSensitivity

        1
        """
        return _libsearch.Search_caseSensitivity(self)

    def find(self, *args):
        """
        find(Search self, char * haystack, uint32_t hslen) -> int32_t
        find(Search self, std::string haystack) -> int32_t

        1
        """
        return _libsearch.Search_find(self, *args)

    def rfind(self, *args):
        """
        rfind(Search self, char * haystack, uint32_t hslen) -> int32_t
        rfind(Search self, std::string haystack) -> int32_t

        1
        """
        return _libsearch.Search_rfind(self, *args)

    def count(self, *args):
        """
        count(Search self, char * haystack, uint32_t hslen, int32_t maxcount=-1) -> int32_t
        count(Search self, char * haystack, uint32_t hslen) -> int32_t
        count(Search self, std::string haystack, int32_t maxcount=-1) -> int32_t
        count(Search self, std::string haystack) -> int32_t

        1
        """
        return _libsearch.Search_count(self, *args)

    def compile(self):
        """
        compile(Search self)

        1
        """
        return _libsearch.Search_compile(self)

Search_swigregister = _libsearch.Search_swigregister
Search_swigregister(Search)

# This file is compatible with both classic and new-style classes.


