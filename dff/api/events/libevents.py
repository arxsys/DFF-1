# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
libevents: c++ generated inteface
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libevents', [dirname(__file__)])
        except ImportError:
            import _libevents
            return _libevents
        if fp is not None:
            try:
                _mod = imp.load_module('_libevents', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libevents = swig_import_helper()
    del swig_import_helper
else:
    import _libevents
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libevents.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        1
        """
        return _libevents.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator

        1
        """
        return _libevents.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator

        1
        """
        return _libevents.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libevents.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        1
        """
        return _libevents.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        1
        """
        return _libevents.SwigPyIterator_copy(self)

    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        1
        """
        return _libevents.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        1
        """
        return _libevents.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        1
        """
        return _libevents.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libevents.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        1
        """
        return _libevents.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        1
        """
        return _libevents.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libevents.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libevents.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libevents.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libevents.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _libevents.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import dff.api.exceptions.libexceptions
class etype(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etype, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etype, name)
    __repr__ = _swig_repr
    OPEN = _libevents.etype_OPEN
    CLOSE = _libevents.etype_CLOSE
    READ = _libevents.etype_READ
    WRITE = _libevents.etype_WRITE
    SEEK = _libevents.etype_SEEK
    OTHER = _libevents.etype_OTHER
    def __init__(self): 
        """
        __init__(DFF::etype self) -> etype

        1
        """
        this = _libevents.new_etype()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libevents.delete_etype
    __del__ = lambda self : None;
etype_swigregister = _libevents.etype_swigregister
etype_swigregister(etype)

class event(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libevents.event_type_set
    __swig_getmethods__["type"] = _libevents.event_type_get
    if _newclass:type = _swig_property(_libevents.event_type_get, _libevents.event_type_set)
    __swig_setmethods__["value"] = _libevents.event_value_set
    __swig_getmethods__["value"] = _libevents.event_value_get
    if _newclass:value = _swig_property(_libevents.event_value_get, _libevents.event_value_set)
    def __init__(self): 
        """
        __init__(DFF::event self) -> event

        1
        """
        this = _libevents.new_event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libevents.delete_event
    __del__ = lambda self : None;
event_swigregister = _libevents.event_swigregister
event_swigregister(event)

class EventHandler(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(DFF::EventHandler self) -> EventHandler

        1
        """
        if self.__class__ == EventHandler:
            _self = None
        else:
            _self = self
        this = _libevents.new_EventHandler(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libevents.delete_EventHandler
    __del__ = lambda self : None;
    def Event(self, *args):
        """
        Event(EventHandler self, event e)

        1
        """
        return _libevents.EventHandler_Event(self, *args)

    def connection(self, *args):
        """
        connection(EventHandler self, EventHandler obs) -> bool

        1
        """
        return _libevents.EventHandler_connection(self, *args)

    def deconnection(self, *args):
        """
        deconnection(EventHandler self, EventHandler obs) -> bool

        1
        """
        return _libevents.EventHandler_deconnection(self, *args)

    def notify(self, *args):
        """
        notify(EventHandler self, event e) -> bool

        1
        """
        return _libevents.EventHandler_notify(self, *args)

    def __disown__(self):
        self.this.disown()
        _libevents.disown_EventHandler(self)
        return weakref_proxy(self)
EventHandler_swigregister = _libevents.EventHandler_swigregister
EventHandler_swigregister(EventHandler)

# This file is compatible with both classic and new-style classes.


