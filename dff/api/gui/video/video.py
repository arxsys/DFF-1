# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
video api to extract thumbnail and metadata
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_video', [dirname(__file__)])
        except ImportError:
            import _video
            return _video
        if fp is not None:
            try:
                _mod = imp.load_module('_video', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _video = swig_import_helper()
    del swig_import_helper
else:
    import _video
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _video.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _video.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _video.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _video.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _video.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _video.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _video.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _video.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _video.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _video.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _video.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _video.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _video.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _video.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _video.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _video.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _video.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _video.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

from PyQt4.QtGui import QImage

import dff.api.exceptions.libexceptions
class RCObjBase(_object):
    """Proxy of C++ DFF::RCObjBase class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCObjBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCObjBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ref_count(self):
        """ref_count(RCObjBase self) -> int32_t"""
        return _video.RCObjBase_ref_count(self)

    def addref(self):
        """addref(RCObjBase self) -> int32_t"""
        return _video.RCObjBase_addref(self)

    def delref(self):
        """delref(RCObjBase self) -> int32_t"""
        return _video.RCObjBase_delref(self)

RCObjBase_swigregister = _video.RCObjBase_swigregister
RCObjBase_swigregister(RCObjBase)

class RCObj(RCObjBase):
    """Proxy of C++ DFF::RCObj class"""
    __swig_setmethods__ = {}
    for _s in [RCObjBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCObj, name, value)
    __swig_getmethods__ = {}
    for _s in [RCObjBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RCObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _video.delete_RCObj
    __del__ = lambda self : None;
RCObj_swigregister = _video.RCObj_swigregister
RCObj_swigregister(RCObj)

class ImageData(_object):
    """Proxy of C++ DFF::ImageData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buff"] = _video.ImageData_buff_set
    __swig_getmethods__["buff"] = _video.ImageData_buff_get
    if _newclass:buff = _swig_property(_video.ImageData_buff_get, _video.ImageData_buff_set)
    __swig_setmethods__["size"] = _video.ImageData_size_set
    __swig_getmethods__["size"] = _video.ImageData_size_get
    if _newclass:size = _swig_property(_video.ImageData_size_get, _video.ImageData_size_set)
    def __init__(self): 
        """__init__(DFF::ImageData self) -> ImageData"""
        this = _video.new_ImageData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _video.delete_ImageData
    __del__ = lambda self : None;
ImageData_swigregister = _video.ImageData_swigregister
ImageData_swigregister(ImageData)

class Image(RCObj):
    """Proxy of C++ DFF::Image class"""
    __swig_setmethods__ = {}
    for _s in [RCObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    for _s in [RCObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(DFF::Image self, uint8_t * idata, uint32_t size, int32_t width, int32_t height) -> Image"""
        this = _video.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _video.delete_Image
    __del__ = lambda self : None;
    def data(self):
        """data(Image self) -> ImageData"""
        return _video.Image_data(self)

    def height(self):
        """height(Image self) -> int32_t"""
        return _video.Image_height(self)

    def width(self):
        """width(Image self) -> int32_t"""
        return _video.Image_width(self)

Image_swigregister = _video.Image_swigregister
Image_swigregister(Image)

class VideoDecoder(_object):
    """Proxy of C++ DFF::VideoDecoder class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoDecoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoDecoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::VideoDecoder self, DFF::Node * node) -> VideoDecoder

        Initialize VideoDecoder class, take a Node as parameter.
        If error occurs throw an std::string containg error message.

        """
        this = _video.new_VideoDecoder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _video.delete_VideoDecoder
    __del__ = lambda self : None;
    def width(self):
        """
        width(VideoDecoder self) -> int32_t

        Return video width or -1 if video can't be decoded. 

        """
        return _video.VideoDecoder_width(self)

    def height(self):
        """
        height(VideoDecoder self) -> int32_t

        Return video height or -1 if video can't be decoded.

        """
        return _video.VideoDecoder_height(self)

    def duration(self):
        """
        duration(VideoDecoder self) -> int32_t

        Return video duration in seconds or 0 if video can't be decoded.

        """
        return _video.VideoDecoder_duration(self)

    def codec(self):
        """codec(VideoDecoder self) -> std::string"""
        return _video.VideoDecoder_codec(self)

    def thumbnailAtPercent(self, *args):
        """
        thumbnailAtPercent(VideoDecoder self, uint8_t timeInPercent, int32_t scaledSize=64) -> RCPtrImage
        thumbnailAtPercent(VideoDecoder self, uint8_t timeInPercent) -> RCPtrImage

        Take a percent of video length and scale size as parameters.
        Return a QImage containg a thumbnail of the video at percent x of the duration, scaled size by default is 64.
        Returned class use ref counting.
        If error occurs throw a std::string containing error message.

        """
        val = _video.VideoDecoder_thumbnailAtPercent(self, *args)
        return QImage(val.data(), val.width(), val.height(), 5)


        return val

    def thumbnailAt(self, *args):
        """
        thumbnailAt(VideoDecoder self, int64_t timeInSeconds, int32_t scaledSize=64) -> RCPtrImage
        thumbnailAt(VideoDecoder self, int64_t timeInSeconds) -> RCPtrImage

        Take a time in seconds and scale size as parameters.
        Return a QImage containg a thumbnail of the video at time x in seconds, scaled size by default is 64.
        Returned class use ref counting.
        If error occurs throw a std::string containing error message.

        """
        val = _video.VideoDecoder_thumbnailAt(self, *args)
        return QImage(val.data(), val.width(), val.height(), 5)  


        return val

VideoDecoder_swigregister = _video.VideoDecoder_swigregister
VideoDecoder_swigregister(VideoDecoder)

class RCPtrImage(_object):
    """Proxy of C++ DFF::RCPtr<(DFF::Image)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCPtrImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCPtrImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::RCPtr<(DFF::Image)> self) -> RCPtrImage
        __init__(DFF::RCPtr<(DFF::Image)> self, Image realPtr) -> RCPtrImage
        __init__(DFF::RCPtr<(DFF::Image)> self, RCPtrImage rhs) -> RCPtrImage
        """
        this = _video.new_RCPtrImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _video.delete_RCPtrImage
    __del__ = lambda self : None;
    def __deref__(self, *args):
        """
        __deref__(RCPtrImage self) -> Image
        __deref__(RCPtrImage self) -> Image
        """
        return _video.RCPtrImage___deref__(self, *args)

    def __ref__(self, *args):
        """
        __ref__(RCPtrImage self) -> Image
        __ref__(RCPtrImage self) -> Image
        """
        return _video.RCPtrImage___ref__(self, *args)

    def get(self, *args):
        """
        get(RCPtrImage self) -> Image
        get(RCPtrImage self) -> Image
        """
        return _video.RCPtrImage_get(self, *args)

    def data(self):
        """data(RCPtrImage self) -> ImageData"""
        return _video.RCPtrImage_data(self)

    def height(self):
        """height(RCPtrImage self) -> int32_t"""
        return _video.RCPtrImage_height(self)

    def width(self):
        """width(RCPtrImage self) -> int32_t"""
        return _video.RCPtrImage_width(self)

    def ref_count(self):
        """ref_count(RCPtrImage self) -> int32_t"""
        return _video.RCPtrImage_ref_count(self)

    def addref(self):
        """addref(RCPtrImage self) -> int32_t"""
        return _video.RCPtrImage_addref(self)

    def delref(self):
        """delref(RCPtrImage self) -> int32_t"""
        return _video.RCPtrImage_delref(self)

RCPtrImage_swigregister = _video.RCPtrImage_swigregister
RCPtrImage_swigregister(RCPtrImage)

# This file is compatible with both classic and new-style classes.


