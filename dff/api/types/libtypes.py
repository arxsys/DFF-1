# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libtypes', [dirname(__file__)])
        except ImportError:
            import _libtypes
            return _libtypes
        if fp is not None:
            try:
                _mod = imp.load_module('_libtypes', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libtypes = swig_import_helper()
    del swig_import_helper
else:
    import _libtypes
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libtypes.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        1
        """
        return _libtypes.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator

        1
        """
        return _libtypes.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator

        1
        """
        return _libtypes.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libtypes.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        1
        """
        return _libtypes.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        1
        """
        return _libtypes.SwigPyIterator_copy(self)

    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        1
        """
        return _libtypes.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        1
        """
        return _libtypes.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        1
        """
        return _libtypes.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libtypes.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        1
        """
        return _libtypes.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        1
        """
        return _libtypes.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libtypes.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libtypes.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libtypes.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libtypes.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _libtypes.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import dff.api.exceptions.libexceptions

def std_list_Sl_DFF_RCPtr_Sl_DFF_Variant_Sg__Sg__operator_Se__Se_(*args):
  """
    std_list_Sl_DFF_RCPtr_Sl_DFF_Variant_Sg__Sg__operator_Se__Se_(VList self, PyObject * obj) -> bool

    1
    """
  return _libtypes.std_list_Sl_DFF_RCPtr_Sl_DFF_Variant_Sg__Sg__operator_Se__Se_(*args)

def std_map_Sl_std_string_Sc_DFF_RCPtr_Sl_DFF_Variant_Sg__Sg__operator_Se__Se_(*args):
  """
    std_map_Sl_std_string_Sc_DFF_RCPtr_Sl_DFF_Variant_Sg__Sg__operator_Se__Se_(VMap self, PyObject * obj) -> bool

    1
    """
  return _libtypes.std_map_Sl_std_string_Sc_DFF_RCPtr_Sl_DFF_Variant_Sg__Sg__operator_Se__Se_(*args)

def SWIG_AsVal_std_string(*args):
  """
    SWIG_AsVal_std_string(PyObject * arg1, std::string * arg2) -> int

    1
    """
  return _libtypes.SWIG_AsVal_std_string(*args)
class RCObjBase(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCObjBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCObjBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ref_count(self):
        """
        ref_count(RCObjBase self) -> int32_t

        1
        """
        return _libtypes.RCObjBase_ref_count(self)

    def addref(self):
        """
        addref(RCObjBase self) -> int32_t

        1
        """
        return _libtypes.RCObjBase_addref(self)

    def delref(self):
        """
        delref(RCObjBase self) -> int32_t

        1
        """
        return _libtypes.RCObjBase_delref(self)

RCObjBase_swigregister = _libtypes.RCObjBase_swigregister
RCObjBase_swigregister(RCObjBase)

class RCObj(RCObjBase):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RCObjBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCObj, name, value)
    __swig_getmethods__ = {}
    for _s in [RCObjBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RCObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _libtypes.delete_RCObj
    __del__ = lambda self : None;
RCObj_swigregister = _libtypes.RCObj_swigregister
RCObj_swigregister(RCObj)

class typeId(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, typeId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, typeId, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Get():
        """
        Get() -> typeId

        1
        """
        return _libtypes.typeId_Get()

    if _newclass:Get = staticmethod(Get)
    __swig_getmethods__["Get"] = lambda x: Get
    Invalid = _libtypes.typeId_Invalid
    String = _libtypes.typeId_String
    CArray = _libtypes.typeId_CArray
    Char = _libtypes.typeId_Char
    Int16 = _libtypes.typeId_Int16
    UInt16 = _libtypes.typeId_UInt16
    Int32 = _libtypes.typeId_Int32
    UInt32 = _libtypes.typeId_UInt32
    Int64 = _libtypes.typeId_Int64
    UInt64 = _libtypes.typeId_UInt64
    Bool = _libtypes.typeId_Bool
    Map = _libtypes.typeId_Map
    List = _libtypes.typeId_List
    DateTime = _libtypes.typeId_DateTime
    Node = _libtypes.typeId_Node
    Path = _libtypes.typeId_Path
    Argument = _libtypes.typeId_Argument
    VoidPtr = _libtypes.typeId_VoidPtr
    VLink = _libtypes.typeId_VLink
    def getType(self, *args):
        """
        getType(typeId self, std::string type) -> uint8_t

        1
        """
        return _libtypes.typeId_getType(self, *args)

    def typeToName(self, *args):
        """
        typeToName(typeId self, uint8_t t) -> std::string

        1
        """
        return _libtypes.typeId_typeToName(self, *args)

typeId_swigregister = _libtypes.typeId_swigregister
typeId_swigregister(typeId)

def typeId_Get():
  """
    typeId_Get() -> typeId

    1
    """
  return _libtypes.typeId_Get()

class Variant(RCObj):
    """1"""
    __swig_setmethods__ = {}
    for _s in [RCObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variant, name, value)
    __swig_getmethods__ = {}
    for _s in [RCObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Variant, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libtypes.delete_Variant
    __del__ = lambda self : None;
    def convert(self, *args):
        """
        convert(Variant self, uint8_t itype, void * res) -> bool

        1
        """
        return _libtypes.Variant_convert(self, *args)

    def toString(self):
        """
        toString(Variant self) -> std::string

        1
        """
        return _libtypes.Variant_toString(self)

    def toHexString(self):
        """
        toHexString(Variant self) -> std::string

        1
        """
        return _libtypes.Variant_toHexString(self)

    def toOctString(self):
        """
        toOctString(Variant self) -> std::string

        1
        """
        return _libtypes.Variant_toOctString(self)

    def toUInt16(self):
        """
        toUInt16(Variant self) -> uint16_t

        1
        """
        return _libtypes.Variant_toUInt16(self)

    def toInt16(self):
        """
        toInt16(Variant self) -> int16_t

        1
        """
        return _libtypes.Variant_toInt16(self)

    def toUInt32(self):
        """
        toUInt32(Variant self) -> uint32_t

        1
        """
        return _libtypes.Variant_toUInt32(self)

    def toInt32(self):
        """
        toInt32(Variant self) -> int32_t

        1
        """
        return _libtypes.Variant_toInt32(self)

    def toUInt64(self):
        """
        toUInt64(Variant self) -> uint64_t

        1
        """
        return _libtypes.Variant_toUInt64(self)

    def toInt64(self):
        """
        toInt64(Variant self) -> int64_t

        1
        """
        return _libtypes.Variant_toInt64(self)

    def toCArray(self):
        """
        toCArray(Variant self) -> char *

        1
        """
        return _libtypes.Variant_toCArray(self)

    def toChar(self):
        """
        toChar(Variant self) -> char

        1
        """
        return _libtypes.Variant_toChar(self)

    def toBool(self):
        """
        toBool(Variant self) -> bool

        1
        """
        return _libtypes.Variant_toBool(self)

    def type(self):
        """
        type(Variant self) -> uint8_t

        1
        """
        return _libtypes.Variant_type(self)

    def typeName(self):
        """
        typeName(Variant self) -> std::string

        1
        """
        return _libtypes.Variant_typeName(self)

    def __Char(self):
        """
        __Char(Variant self) -> char

        1
        """
        return _libtypes.Variant___Char(self)

    def __Int16(self):
        """
        __Int16(Variant self) -> short

        1
        """
        return _libtypes.Variant___Int16(self)

    def __UInt16(self):
        """
        __UInt16(Variant self) -> unsigned short

        1
        """
        return _libtypes.Variant___UInt16(self)

    def __Int32(self):
        """
        __Int32(Variant self) -> int

        1
        """
        return _libtypes.Variant___Int32(self)

    def __UInt32(self):
        """
        __UInt32(Variant self) -> unsigned int

        1
        """
        return _libtypes.Variant___UInt32(self)

    def __Int64(self):
        """
        __Int64(Variant self) -> long

        1
        """
        return _libtypes.Variant___Int64(self)

    def __UInt64(self):
        """
        __UInt64(Variant self) -> unsigned long

        1
        """
        return _libtypes.Variant___UInt64(self)

    def __Bool(self):
        """
        __Bool(Variant self) -> bool

        1
        """
        return _libtypes.Variant___Bool(self)

    def __CArray(self):
        """
        __CArray(Variant self) -> char *

        1
        """
        return _libtypes.Variant___CArray(self)

    def __Node(self):
        """
        __Node(Variant self) -> DFF::Node *

        1
        """
        return _libtypes.Variant___Node(self)

    def __Path(self):
        """
        __Path(Variant self) -> Path

        1
        """
        return _libtypes.Variant___Path(self)

    def __DateTime(self):
        """
        __DateTime(Variant self) -> DateTime

        1
        """
        return _libtypes.Variant___DateTime(self)

    def __VLink(self):
        """
        __VLink(Variant self) -> DFF::VLink *

        1
        """
        return _libtypes.Variant___VLink(self)

    def __String(self):
        """
        __String(Variant self) -> std::string

        1
        """
        return _libtypes.Variant___String(self)

    def __VList(self):
        """
        __VList(Variant self) -> VList

        1
        """
        return _libtypes.Variant___VList(self)

    def __VMap(self):
        """
        __VMap(Variant self) -> VMap

        1
        """
        return _libtypes.Variant___VMap(self)

    def __init__(self, *args): 
        """
        __init__(DFF::Variant self) -> Variant
        __init__(DFF::Variant self, Variant arg2) -> Variant
        __init__(DFF::Variant self, std::string str) -> Variant
        __init__(DFF::Variant self, char * carray) -> Variant
        __init__(DFF::Variant self, char c) -> Variant
        __init__(DFF::Variant self, uint16_t us) -> Variant
        __init__(DFF::Variant self, int16_t s) -> Variant
        __init__(DFF::Variant self, uint32_t ui) -> Variant
        __init__(DFF::Variant self, int32_t i) -> Variant
        __init__(DFF::Variant self, int64_t ull) -> Variant
        __init__(DFF::Variant self, uint64_t ll) -> Variant
        __init__(DFF::Variant self, bool b) -> Variant
        __init__(DFF::Variant self, DateTime vt) -> Variant
        __init__(DFF::Variant self, DFF::Node * node) -> Variant
        __init__(DFF::Variant self, Path path) -> Variant
        __init__(DFF::Variant self, Argument argument) -> Variant
        __init__(DFF::Variant self, VList l) -> Variant
        __init__(DFF::Variant self, VMap m) -> Variant
        __init__(DFF::Variant self, void * user) -> Variant
        __init__(DFF::Variant self, DFF::VLink * node) -> Variant
        __init__(DFF::Variant self, PyObject * obj, uint8_t type) -> Variant

        1
        """
        this = _libtypes.new_Variant(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """
        __eq__(Variant self, Variant v) -> bool
        __eq__(Variant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.Variant___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(Variant self, Variant v) -> bool
        __ne__(Variant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.Variant___ne__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(Variant self, Variant v) -> bool
        __gt__(Variant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.Variant___gt__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(Variant self, Variant v) -> bool
        __lt__(Variant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.Variant___lt__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(Variant self, Variant v) -> bool
        __ge__(Variant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.Variant___ge__(self, *args)

    def __le__(self, *args):
        """
        __le__(Variant self, Variant v) -> bool
        __le__(Variant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.Variant___le__(self, *args)

    funcMapper = {typeId.Char: "_Variant__Char",
                  typeId.Int16: "_Variant__Int16",
                  typeId.UInt16: "_Variant__UInt16",
                  typeId.Int32: "_Variant__Int32",
                  typeId.UInt32: "_Variant__UInt32",
                  typeId.Int64: "_Variant__Int64",
                  typeId.UInt64: "_Variant__UInt64",
                  typeId.Bool: "_Variant__Bool",
                  typeId.String: "_Variant__String",
                  typeId.CArray: "_Variant__CArray",
                  typeId.Node: "_Variant__Node",
                  typeId.Path: "_Variant__Path",
                  typeId.DateTime: "_Variant__DateTime",
                  typeId.List: "_Variant__VList",
                  typeId.Map: "_Variant__VMap",
                  typeId.VLink: "_Variant__VLink"}

    def __str__(self):
        if self.type() == typeId.Node:
           return self.value().absolute()
        elif self.type() == typeId.DateTime:
           return self.value()
        else:
           return self.toString()


    def value(self):
       try:
         valType = self.type()
         if valType in self.funcMapper.keys():
            func = getattr(self, Variant.funcMapper[valType])
            if func != None:
              val = func()
              return val
            else:
              return None
         else:
           return None
       except :
         return None

Variant_swigregister = _libtypes.Variant_swigregister
Variant_swigregister(Variant)

TYPEMASK = _libtypes.TYPEMASK
INPUTMASK = _libtypes.INPUTMASK
NEEDMASK = _libtypes.NEEDMASK
PARAMMASK = _libtypes.PARAMMASK
class Parameter(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr
    NotEditable = _libtypes.Parameter_NotEditable
    Editable = _libtypes.Parameter_Editable
    def __init__(self): 
        """
        __init__(DFF::Parameter self) -> Parameter

        1
        """
        this = _libtypes.new_Parameter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_Parameter
    __del__ = lambda self : None;
Parameter_swigregister = _libtypes.Parameter_swigregister
Parameter_swigregister(Parameter)

class Argument(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Argument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Argument, name)
    __repr__ = _swig_repr
    Empty = _libtypes.Argument_Empty
    Single = _libtypes.Argument_Single
    List = _libtypes.Argument_List
    Optional = _libtypes.Argument_Optional
    Required = _libtypes.Argument_Required
    def __init__(self, *args): 
        """
        __init__(DFF::Argument self, std::string name, uint16_t flags, std::string description="") -> Argument
        __init__(DFF::Argument self, std::string name, uint16_t flags) -> Argument

        1
        """
        this = _libtypes.new_Argument(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_Argument
    __del__ = lambda self : None;
    def addSubArgument(self, *args):
        """
        addSubArgument(Argument self, Argument arg)

        1
        """
        return _libtypes.Argument_addSubArgument(self, *args)

    def parameters(self):
        """
        parameters(Argument self) -> VList

        1
        """
        return _libtypes.Argument_parameters(self)

    def parametersCount(self):
        """
        parametersCount(Argument self) -> uint32_t

        1
        """
        return _libtypes.Argument_parametersCount(self)

    def name(self):
        """
        name(Argument self) -> std::string

        1
        """
        return _libtypes.Argument_name(self)

    def flags(self):
        """
        flags(Argument self) -> uint16_t

        1
        """
        return _libtypes.Argument_flags(self)

    def description(self):
        """
        description(Argument self) -> std::string

        1
        """
        return _libtypes.Argument_description(self)

    def type(self):
        """
        type(Argument self) -> uint16_t

        1
        """
        return _libtypes.Argument_type(self)

    def inputType(self):
        """
        inputType(Argument self) -> uint16_t

        1
        """
        return _libtypes.Argument_inputType(self)

    def parametersType(self):
        """
        parametersType(Argument self) -> uint16_t

        1
        """
        return _libtypes.Argument_parametersType(self)

    def requirementType(self):
        """
        requirementType(Argument self) -> uint16_t

        1
        """
        return _libtypes.Argument_requirementType(self)

    def minimumParameters(self):
        """
        minimumParameters(Argument self) -> int32_t

        1
        """
        return _libtypes.Argument_minimumParameters(self)

    def maximumParameters(self):
        """
        maximumParameters(Argument self) -> int32_t

        1
        """
        return _libtypes.Argument_maximumParameters(self)

    def validateParams(self, *args):
        """
        validateParams(Argument self, PyObject * obj, uint16_t * ptype, int32_t * min, int32_t * max) -> PyObject *

        1
        """
        return _libtypes.Argument_validateParams(self, *args)

    def addParameters(self, *args):
        """
        addParameters(Argument self, VList params, uint16_t type, int32_t min=-1, int32_t max=-1)
        addParameters(Argument self, VList params, uint16_t type, int32_t min=-1)
        addParameters(Argument self, VList params, uint16_t type)
        addParameters(Argument self, PyObject * obj)

        1
        """
        return _libtypes.Argument_addParameters(self, *args)

Argument_swigregister = _libtypes.Argument_swigregister
Argument_swigregister(Argument)

class Constant(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constant, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::Constant self, std::string name, uint8_t type, std::string description) -> Constant

        1
        """
        this = _libtypes.new_Constant(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_Constant
    __del__ = lambda self : None;
    def name(self):
        """
        name(Constant self) -> std::string

        1
        """
        return _libtypes.Constant_name(self)

    def description(self):
        """
        description(Constant self) -> std::string

        1
        """
        return _libtypes.Constant_description(self)

    def type(self):
        """
        type(Constant self) -> uint8_t

        1
        """
        return _libtypes.Constant_type(self)

    def values(self):
        """
        values(Constant self) -> VList

        1
        """
        return _libtypes.Constant_values(self)

    def addValues(self, *args):
        """
        addValues(Constant self, VList values)
        addValues(Constant self, PyObject * obj)

        1
        """
        return _libtypes.Constant_addValues(self, *args)

Constant_swigregister = _libtypes.Constant_swigregister
Constant_swigregister(Constant)

class Config(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::Config self, std::string origin, std::string description="") -> Config
        __init__(DFF::Config self, std::string origin) -> Config

        1
        """
        this = _libtypes.new_Config(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_Config
    __del__ = lambda self : None;
    def origin(self):
        """
        origin(Config self) -> std::string

        1
        """
        return _libtypes.Config_origin(self)

    def description(self):
        """
        description(Config self) -> std::string

        1
        """
        return _libtypes.Config_description(self)

    def arguments(self):
        """
        arguments(Config self) -> ArgumentList

        1
        """
        return _libtypes.Config_arguments(self)

    def argumentsName(self):
        """
        argumentsName(Config self) -> ListString

        1
        """
        return _libtypes.Config_argumentsName(self)

    def argumentByName(self, *args):
        """
        argumentByName(Config self, std::string argname) -> Argument

        1
        """
        return _libtypes.Config_argumentByName(self, *args)

    def argumentsByName(self, *args):
        """
        argumentsByName(Config self, ListString argsname) -> ArgumentList

        1
        """
        return _libtypes.Config_argumentsByName(self, *args)

    def argumentsByFlags(self, *args):
        """
        argumentsByFlags(Config self, uint16_t flags) -> ArgumentList

        1
        """
        return _libtypes.Config_argumentsByFlags(self, *args)

    def argumentsByInputType(self, *args):
        """
        argumentsByInputType(Config self, uint16_t itype) -> ArgumentList

        1
        """
        return _libtypes.Config_argumentsByInputType(self, *args)

    def argumentsByRequirementType(self, *args):
        """
        argumentsByRequirementType(Config self, uint16_t rtype) -> ArgumentList

        1
        """
        return _libtypes.Config_argumentsByRequirementType(self, *args)

    def argumentsByType(self, *args):
        """
        argumentsByType(Config self, uint16_t type) -> ArgumentList

        1
        """
        return _libtypes.Config_argumentsByType(self, *args)

    def constants(self):
        """
        constants(Config self) -> ConstantList

        1
        """
        return _libtypes.Config_constants(self)

    def constantByName(self, *args):
        """
        constantByName(Config self, std::string cname) -> Constant

        1
        """
        return _libtypes.Config_constantByName(self, *args)

    def constantByType(self, *args):
        """
        constantByType(Config self, uint8_t type) -> ConstantList

        1
        """
        return _libtypes.Config_constantByType(self, *args)

    def matchNotEditable(self, *args):
        """
        matchNotEditable(Config self, VList params, PyObject * obj) -> bool

        1
        """
        return _libtypes.Config_matchNotEditable(self, *args)

    def generateSingleInput(self, *args):
        """
        generateSingleInput(Config self, PyObject * obj, Argument arg) -> Variant

        1
        """
        return _libtypes.Config_generateSingleInput(self, *args)

    def generateListInput(self, *args):
        """
        generateListInput(Config self, PyObject * obj, Argument arg) -> Variant

        1
        """
        return _libtypes.Config_generateListInput(self, *args)

    def generate(self, *args):
        """
        generate(Config self, PyObject * obj) -> VMap

        1
        """
        return _libtypes.Config_generate(self, *args)

    def addConstant(self, *args):
        """
        addConstant(Config self, Constant constant)
        addConstant(Config self, PyObject * obj)

        1
        """
        return _libtypes.Config_addConstant(self, *args)

    def addArgument(self, *args):
        """
        addArgument(Config self, Argument arg)
        addArgument(Config self, PyObject * obj)

        1
        """
        return _libtypes.Config_addArgument(self, *args)

Config_swigregister = _libtypes.Config_swigregister
Config_swigregister(Config)

class Path(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _libtypes.Path_path_set
    __swig_getmethods__["path"] = _libtypes.Path_path_get
    if _newclass:path = _swig_property(_libtypes.Path_path_get, _libtypes.Path_path_set)
    def __init__(self, *args): 
        """
        __init__(DFF::Path self, std::string p) -> Path

        1
        """
        this = _libtypes.new_Path(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_Path
    __del__ = lambda self : None;
Path_swigregister = _libtypes.Path_swigregister
Path_swigregister(Path)

class DateTime(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::DateTime self, int64_t epochTime) -> DateTime
        __init__(DFF::DateTime self, DateTime arg2) -> DateTime
        __init__(DFF::DateTime self, std::string const & arg2) -> DateTime
        __init__(DFF::DateTime self, int32_t year, int32_t month, int32_t day, int32_t minute, int32_t hour, int32_t second) -> DateTime

        1
        """
        this = _libtypes.new_DateTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_DateTime
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """
        __eq__(DateTime self, DateTime other) -> bool

        1
        """
        return _libtypes.DateTime___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(DateTime self, DateTime other) -> bool

        1
        """
        return _libtypes.DateTime___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(DateTime self, DateTime other) -> bool

        1
        """
        return _libtypes.DateTime___lt__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(DateTime self, DateTime other) -> bool

        1
        """
        return _libtypes.DateTime___gt__(self, *args)

    def __le__(self, *args):
        """
        __le__(DateTime self, DateTime other) -> bool

        1
        """
        return _libtypes.DateTime___le__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(DateTime self, DateTime other) -> bool

        1
        """
        return _libtypes.DateTime___ge__(self, *args)

    def epochTime(self, *args):
        """
        epochTime(DateTime self) -> int64_t
        epochTime(DateTime self, int64_t arg2)

        1
        """
        return _libtypes.DateTime_epochTime(self, *args)

    def globalTimeZone(self, *args):
        """
        globalTimeZone(DateTime self) -> int32_t
        globalTimeZone(DateTime self, int32_t timeZone)

        1
        """
        return _libtypes.DateTime_globalTimeZone(self, *args)

    def toString(self):
        """
        toString(DateTime self) -> std::string const

        1
        """
        return _libtypes.DateTime_toString(self)

    def toISOString(self):
        """
        toISOString(DateTime self) -> std::string const

        1
        """
        return _libtypes.DateTime_toISOString(self)

    def year(self):
        """
        year(DateTime self) -> int32_t

        1
        """
        return _libtypes.DateTime_year(self)

    def month(self):
        """
        month(DateTime self) -> int32_t

        1
        """
        return _libtypes.DateTime_month(self)

    def day(self):
        """
        day(DateTime self) -> int32_t

        1
        """
        return _libtypes.DateTime_day(self)

    def hour(self):
        """
        hour(DateTime self) -> int32_t

        1
        """
        return _libtypes.DateTime_hour(self)

    def minute(self):
        """
        minute(DateTime self) -> int32_t

        1
        """
        return _libtypes.DateTime_minute(self)

    def second(self):
        """
        second(DateTime self) -> int32_t

        1
        """
        return _libtypes.DateTime_second(self)

    def dayOfWeek(self):
        """
        dayOfWeek(DateTime self) -> int32_t

        1
        """
        return _libtypes.DateTime_dayOfWeek(self)

    def dayOfYear(self):
        """
        dayOfYear(DateTime self) -> int32_t

        1
        """
        return _libtypes.DateTime_dayOfYear(self)

    def toPyDateTime(self, *args):
        """
        toPyDateTime(DateTime self) -> PyObject *

        1
        """
        return _libtypes.DateTime_toPyDateTime(self, *args)

    def __str__(self):
      return self.toString()

DateTime_swigregister = _libtypes.DateTime_swigregister
DateTime_swigregister(DateTime)

class DosDateTime(DateTime):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DateTime]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DosDateTime, name, value)
    __swig_getmethods__ = {}
    for _s in [DateTime]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DosDateTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::DosDateTime self, uint16_t time, uint16_t date) -> DosDateTime

        1
        """
        this = _libtypes.new_DosDateTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_DosDateTime
    __del__ = lambda self : None;
DosDateTime_swigregister = _libtypes.DosDateTime_swigregister
DosDateTime_swigregister(DosDateTime)

class MS64DateTime(DateTime):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DateTime]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MS64DateTime, name, value)
    __swig_getmethods__ = {}
    for _s in [DateTime]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MS64DateTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::MS64DateTime self, uint64_t arg2) -> MS64DateTime

        1
        """
        this = _libtypes.new_MS64DateTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_MS64DateTime
    __del__ = lambda self : None;
MS64DateTime_swigregister = _libtypes.MS64DateTime_swigregister
MS64DateTime_swigregister(MS64DateTime)

class MS128DateTime(DateTime):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DateTime]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MS128DateTime, name, value)
    __swig_getmethods__ = {}
    for _s in [DateTime]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MS128DateTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::MS128DateTime self, char * arg2) -> MS128DateTime

        1
        """
        this = _libtypes.new_MS128DateTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_MS128DateTime
    __del__ = lambda self : None;
MS128DateTime_swigregister = _libtypes.MS128DateTime_swigregister
MS128DateTime_swigregister(MS128DateTime)

class HFSDateTime(DateTime):
    """1"""
    __swig_setmethods__ = {}
    for _s in [DateTime]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HFSDateTime, name, value)
    __swig_getmethods__ = {}
    for _s in [DateTime]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HFSDateTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::HFSDateTime self, uint32_t arg2) -> HFSDateTime

        1
        """
        this = _libtypes.new_HFSDateTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_HFSDateTime
    __del__ = lambda self : None;
HFSDateTime_swigregister = _libtypes.HFSDateTime_swigregister
HFSDateTime_swigregister(HFSDateTime)

class ConfigManager(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Get():
        """
        Get() -> ConfigManager

        1
        """
        return _libtypes.ConfigManager_Get()

    if _newclass:Get = staticmethod(Get)
    __swig_getmethods__["Get"] = lambda x: Get
    def unregisterConf(self, *args):
        """
        unregisterConf(ConfigManager self, std::string confname)

        1
        """
        return _libtypes.ConfigManager_unregisterConf(self, *args)

    def registerConf(self, *args):
        """
        registerConf(ConfigManager self, Config c)

        1
        """
        return _libtypes.ConfigManager_registerConf(self, *args)

    def configs(self):
        """
        configs(ConfigManager self) -> ConfigList

        1
        """
        return _libtypes.ConfigManager_configs(self)

    def configsName(self):
        """
        configsName(ConfigManager self) -> ListString

        1
        """
        return _libtypes.ConfigManager_configsName(self)

    def configByName(self, *args):
        """
        configByName(ConfigManager self, std::string confname) -> Config

        1
        """
        return _libtypes.ConfigManager_configByName(self, *args)

    def constantsByName(self, *args):
        """
        constantsByName(ConfigManager self, std::string constname) -> MapConstant

        1
        """
        return _libtypes.ConfigManager_constantsByName(self, *args)

    def argumentsByName(self, *args):
        """
        argumentsByName(ConfigManager self, std::string argname) -> MapArgument

        1
        """
        return _libtypes.ConfigManager_argumentsByName(self, *args)

ConfigManager_swigregister = _libtypes.ConfigManager_swigregister
ConfigManager_swigregister(ConfigManager)

def ConfigManager_Get():
  """
    ConfigManager_Get() -> ConfigManager

    1
    """
  return _libtypes.ConfigManager_Get()

class RCVariant(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCVariant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCVariant, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DFF::RCPtr<(DFF::Variant)> self) -> RCVariant
        __init__(DFF::RCPtr<(DFF::Variant)> self, Variant realPtr) -> RCVariant
        __init__(DFF::RCPtr<(DFF::Variant)> self, RCVariant rhs) -> RCVariant

        1
        """
        this = _libtypes.new_RCVariant(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtypes.delete_RCVariant
    __del__ = lambda self : None;
    def __deref__(self, *args):
        """
        __deref__(RCVariant self) -> Variant
        __deref__(RCVariant self) -> Variant

        1
        """
        return _libtypes.RCVariant___deref__(self, *args)

    def __ref__(self, *args):
        """
        __ref__(RCVariant self) -> Variant
        __ref__(RCVariant self) -> Variant

        1
        """
        return _libtypes.RCVariant___ref__(self, *args)

    def get(self, *args):
        """
        get(RCVariant self) -> Variant
        get(RCVariant self) -> Variant

        1
        """
        return _libtypes.RCVariant_get(self, *args)

    funcMapper = {typeId.Char: "_RCVariant__Char",
    typeId.Int16: "_RCVariant__Int16",
    typeId.UInt16: "_RCVariant__UInt16",
    typeId.Int32: "_RCVariant__Int32",
    typeId.UInt32: "_RCVariant__UInt32",
    typeId.Int64: "_RCVariant__Int64",
    typeId.UInt64: "_RCVariant__UInt64",
    typeId.Bool: "_RCVariant__Bool",
    typeId.String: "_RCVariant__String",
    typeId.CArray: "_RCVariant__CArray",
    typeId.Node: "_RCVariant__Node",
    typeId.Path: "_RCVariant__Path",
    typeId.DateTime: "_RCVariant__DateTime",
    typeId.List: "_RCVariant__VList",
    typeId.Map: "_RCVariant__VMap",
                  typeId.VLink: "_RCVariant__VLink"}

    def __str__(self):
        if self.type() == typeId.Node:
           return self.value().absolute()
        elif self.type() == typeId.DateTime:
           return self.value()
        else:
           return self.toString()


    def value(self):
       try:
         valType = self.type()
         if valType in self.funcMapper.keys():
            func = getattr(self, RCVariant.funcMapper[valType])
            if func != None:
                val = func()
                return val
            else:
                return None
         else:
            return None
       except :
        return None

    def convert(self, *args):
        """
        convert(RCVariant self, uint8_t itype, void * res) -> bool

        1
        """
        return _libtypes.RCVariant_convert(self, *args)

    def __eq__(self, *args):
        """
        __eq__(RCVariant self, Variant v) -> bool
        __eq__(RCVariant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.RCVariant___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(RCVariant self, Variant v) -> bool
        __ne__(RCVariant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.RCVariant___ne__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(RCVariant self, Variant v) -> bool
        __gt__(RCVariant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.RCVariant___gt__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(RCVariant self, Variant v) -> bool
        __ge__(RCVariant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.RCVariant___ge__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(RCVariant self, Variant v) -> bool
        __lt__(RCVariant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.RCVariant___lt__(self, *args)

    def __le__(self, *args):
        """
        __le__(RCVariant self, Variant v) -> bool
        __le__(RCVariant self, PyObject * obj) -> bool

        1
        """
        return _libtypes.RCVariant___le__(self, *args)

    def toString(self):
        """
        toString(RCVariant self) -> std::string

        1
        """
        return _libtypes.RCVariant_toString(self)

    def toHexString(self):
        """
        toHexString(RCVariant self) -> std::string

        1
        """
        return _libtypes.RCVariant_toHexString(self)

    def toOctString(self):
        """
        toOctString(RCVariant self) -> std::string

        1
        """
        return _libtypes.RCVariant_toOctString(self)

    def toUInt16(self):
        """
        toUInt16(RCVariant self) -> uint16_t

        1
        """
        return _libtypes.RCVariant_toUInt16(self)

    def toInt16(self):
        """
        toInt16(RCVariant self) -> int16_t

        1
        """
        return _libtypes.RCVariant_toInt16(self)

    def toUInt32(self):
        """
        toUInt32(RCVariant self) -> uint32_t

        1
        """
        return _libtypes.RCVariant_toUInt32(self)

    def toInt32(self):
        """
        toInt32(RCVariant self) -> int32_t

        1
        """
        return _libtypes.RCVariant_toInt32(self)

    def toUInt64(self):
        """
        toUInt64(RCVariant self) -> uint64_t

        1
        """
        return _libtypes.RCVariant_toUInt64(self)

    def toInt64(self):
        """
        toInt64(RCVariant self) -> int64_t

        1
        """
        return _libtypes.RCVariant_toInt64(self)

    def toCArray(self):
        """
        toCArray(RCVariant self) -> char *

        1
        """
        return _libtypes.RCVariant_toCArray(self)

    def toChar(self):
        """
        toChar(RCVariant self) -> char

        1
        """
        return _libtypes.RCVariant_toChar(self)

    def toBool(self):
        """
        toBool(RCVariant self) -> bool

        1
        """
        return _libtypes.RCVariant_toBool(self)

    def type(self):
        """
        type(RCVariant self) -> uint8_t

        1
        """
        return _libtypes.RCVariant_type(self)

    def typeName(self):
        """
        typeName(RCVariant self) -> std::string

        1
        """
        return _libtypes.RCVariant_typeName(self)

    def __Char(self):
        """
        __Char(RCVariant self) -> char

        1
        """
        return _libtypes.RCVariant___Char(self)

    def __Int16(self):
        """
        __Int16(RCVariant self) -> short

        1
        """
        return _libtypes.RCVariant___Int16(self)

    def __UInt16(self):
        """
        __UInt16(RCVariant self) -> unsigned short

        1
        """
        return _libtypes.RCVariant___UInt16(self)

    def __Int32(self):
        """
        __Int32(RCVariant self) -> int

        1
        """
        return _libtypes.RCVariant___Int32(self)

    def __UInt32(self):
        """
        __UInt32(RCVariant self) -> unsigned int

        1
        """
        return _libtypes.RCVariant___UInt32(self)

    def __Int64(self):
        """
        __Int64(RCVariant self) -> long

        1
        """
        return _libtypes.RCVariant___Int64(self)

    def __UInt64(self):
        """
        __UInt64(RCVariant self) -> unsigned long

        1
        """
        return _libtypes.RCVariant___UInt64(self)

    def __Bool(self):
        """
        __Bool(RCVariant self) -> bool

        1
        """
        return _libtypes.RCVariant___Bool(self)

    def __CArray(self):
        """
        __CArray(RCVariant self) -> char *

        1
        """
        return _libtypes.RCVariant___CArray(self)

    def __Node(self):
        """
        __Node(RCVariant self) -> DFF::Node *

        1
        """
        return _libtypes.RCVariant___Node(self)

    def __Path(self):
        """
        __Path(RCVariant self) -> Path

        1
        """
        return _libtypes.RCVariant___Path(self)

    def __DateTime(self):
        """
        __DateTime(RCVariant self) -> DateTime

        1
        """
        return _libtypes.RCVariant___DateTime(self)

    def __VLink(self):
        """
        __VLink(RCVariant self) -> DFF::VLink *

        1
        """
        return _libtypes.RCVariant___VLink(self)

    def __String(self):
        """
        __String(RCVariant self) -> std::string

        1
        """
        return _libtypes.RCVariant___String(self)

    def __VList(self):
        """
        __VList(RCVariant self) -> VList

        1
        """
        return _libtypes.RCVariant___VList(self)

    def __VMap(self):
        """
        __VMap(RCVariant self) -> VMap

        1
        """
        return _libtypes.RCVariant___VMap(self)

    def ref_count(self):
        """
        ref_count(RCVariant self) -> int32_t

        1
        """
        return _libtypes.RCVariant_ref_count(self)

    def addref(self):
        """
        addref(RCVariant self) -> int32_t

        1
        """
        return _libtypes.RCVariant_addref(self)

    def delref(self):
        """
        delref(RCVariant self) -> int32_t

        1
        """
        return _libtypes.RCVariant_delref(self)

RCVariant_swigregister = _libtypes.RCVariant_swigregister
RCVariant_swigregister(RCVariant)

class MapString(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapString, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(MapString self) -> SwigPyIterator

        1
        """
        return _libtypes.MapString_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(MapString self) -> bool

        1
        """
        return _libtypes.MapString___nonzero__(self)

    def __bool__(self):
        """
        __bool__(MapString self) -> bool

        1
        """
        return _libtypes.MapString___bool__(self)

    def __len__(self):
        """
        __len__(MapString self) -> std::map< std::string,std::string >::size_type

        1
        """
        return _libtypes.MapString___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(MapString self, std::map< std::string,std::string >::key_type const & key) -> std::map< std::string,std::string >::mapped_type const &

        1
        """
        return _libtypes.MapString___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(MapString self, std::map< std::string,std::string >::key_type const & key)

        1
        """
        return _libtypes.MapString___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(MapString self, std::map< std::string,std::string >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapString_has_key(self, *args)

    def keys(self):
        """
        keys(MapString self) -> PyObject *

        1
        """
        return _libtypes.MapString_keys(self)

    def values(self):
        """
        values(MapString self) -> PyObject *

        1
        """
        return _libtypes.MapString_values(self)

    def items(self):
        """
        items(MapString self) -> PyObject *

        1
        """
        return _libtypes.MapString_items(self)

    def __contains__(self, *args):
        """
        __contains__(MapString self, std::map< std::string,std::string >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapString___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(MapString self) -> SwigPyIterator

        1
        """
        return _libtypes.MapString_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(MapString self) -> SwigPyIterator

        1
        """
        return _libtypes.MapString_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(MapString self, std::map< std::string,std::string >::key_type const & key)
        __setitem__(MapString self, std::map< std::string,std::string >::key_type const & key, std::map< std::string,std::string >::mapped_type const & x)

        1
        """
        return _libtypes.MapString___setitem__(self, *args)

    def asdict(self):
        """
        asdict(MapString self) -> PyObject *

        1
        """
        return _libtypes.MapString_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,std::string)> self, std::less< std::string > const & arg2) -> MapString
        __init__(std::map<(std::string,std::string)> self) -> MapString
        __init__(std::map<(std::string,std::string)> self, MapString arg2) -> MapString

        1
        """
        this = _libtypes.new_MapString(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(MapString self) -> bool

        1
        """
        return _libtypes.MapString_empty(self)

    def size(self):
        """
        size(MapString self) -> std::map< std::string,std::string >::size_type

        1
        """
        return _libtypes.MapString_size(self)

    def clear(self):
        """
        clear(MapString self)

        1
        """
        return _libtypes.MapString_clear(self)

    def swap(self, *args):
        """
        swap(MapString self, MapString v)

        1
        """
        return _libtypes.MapString_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(MapString self) -> std::map< std::string,std::string >::allocator_type

        1
        """
        return _libtypes.MapString_get_allocator(self)

    def begin(self):
        """
        begin(MapString self) -> std::map< std::string,std::string >::iterator

        1
        """
        return _libtypes.MapString_begin(self)

    def end(self):
        """
        end(MapString self) -> std::map< std::string,std::string >::iterator

        1
        """
        return _libtypes.MapString_end(self)

    def rbegin(self):
        """
        rbegin(MapString self) -> std::map< std::string,std::string >::reverse_iterator

        1
        """
        return _libtypes.MapString_rbegin(self)

    def rend(self):
        """
        rend(MapString self) -> std::map< std::string,std::string >::reverse_iterator

        1
        """
        return _libtypes.MapString_rend(self)

    def count(self, *args):
        """
        count(MapString self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type

        1
        """
        return _libtypes.MapString_count(self, *args)

    def erase(self, *args):
        """
        erase(MapString self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type
        erase(MapString self, std::map< std::string,std::string >::iterator position)
        erase(MapString self, std::map< std::string,std::string >::iterator first, std::map< std::string,std::string >::iterator last)

        1
        """
        return _libtypes.MapString_erase(self, *args)

    def find(self, *args):
        """
        find(MapString self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        1
        """
        return _libtypes.MapString_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(MapString self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        1
        """
        return _libtypes.MapString_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(MapString self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        1
        """
        return _libtypes.MapString_upper_bound(self, *args)

    __swig_destroy__ = _libtypes.delete_MapString
    __del__ = lambda self : None;
MapString_swigregister = _libtypes.MapString_swigregister
MapString_swigregister(MapString)

class ListString(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListString, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(ListString self) -> SwigPyIterator

        1
        """
        return _libtypes.ListString_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(ListString self) -> bool

        1
        """
        return _libtypes.ListString___nonzero__(self)

    def __bool__(self):
        """
        __bool__(ListString self) -> bool

        1
        """
        return _libtypes.ListString___bool__(self)

    def __len__(self):
        """
        __len__(ListString self) -> std::list< std::string >::size_type

        1
        """
        return _libtypes.ListString___len__(self)

    def pop(self):
        """
        pop(ListString self) -> std::list< std::string >::value_type

        1
        """
        return _libtypes.ListString_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(ListString self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j) -> ListString

        1
        """
        return _libtypes.ListString___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ListString self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j, 
            ListString v=std::list< std::string,std::allocator< std::string > >())
        __setslice__(ListString self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j)

        1
        """
        return _libtypes.ListString___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(ListString self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j)

        1
        """
        return _libtypes.ListString___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ListString self, std::list< std::string >::difference_type i)
        __delitem__(ListString self, PySliceObject * slice)

        1
        """
        return _libtypes.ListString___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ListString self, PySliceObject * slice) -> ListString
        __getitem__(ListString self, std::list< std::string >::difference_type i) -> std::list< std::string >::value_type const &

        1
        """
        return _libtypes.ListString___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ListString self, PySliceObject * slice, ListString v)
        __setitem__(ListString self, PySliceObject * slice)
        __setitem__(ListString self, std::list< std::string >::difference_type i, std::list< std::string >::value_type const & x)

        1
        """
        return _libtypes.ListString___setitem__(self, *args)

    def append(self, *args):
        """
        append(ListString self, std::list< std::string >::value_type const & x)

        1
        """
        return _libtypes.ListString_append(self, *args)

    def empty(self):
        """
        empty(ListString self) -> bool

        1
        """
        return _libtypes.ListString_empty(self)

    def size(self):
        """
        size(ListString self) -> std::list< std::string >::size_type

        1
        """
        return _libtypes.ListString_size(self)

    def clear(self):
        """
        clear(ListString self)

        1
        """
        return _libtypes.ListString_clear(self)

    def swap(self, *args):
        """
        swap(ListString self, ListString v)

        1
        """
        return _libtypes.ListString_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(ListString self) -> std::list< std::string >::allocator_type

        1
        """
        return _libtypes.ListString_get_allocator(self)

    def begin(self):
        """
        begin(ListString self) -> std::list< std::string >::iterator

        1
        """
        return _libtypes.ListString_begin(self)

    def end(self):
        """
        end(ListString self) -> std::list< std::string >::iterator

        1
        """
        return _libtypes.ListString_end(self)

    def rbegin(self):
        """
        rbegin(ListString self) -> std::list< std::string >::reverse_iterator

        1
        """
        return _libtypes.ListString_rbegin(self)

    def rend(self):
        """
        rend(ListString self) -> std::list< std::string >::reverse_iterator

        1
        """
        return _libtypes.ListString_rend(self)

    def pop_back(self):
        """
        pop_back(ListString self)

        1
        """
        return _libtypes.ListString_pop_back(self)

    def erase(self, *args):
        """
        erase(ListString self, std::list< std::string >::iterator pos) -> std::list< std::string >::iterator
        erase(ListString self, std::list< std::string >::iterator first, std::list< std::string >::iterator last) -> std::list< std::string >::iterator

        1
        """
        return _libtypes.ListString_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(std::string)> self) -> ListString
        __init__(std::list<(std::string)> self, ListString arg2) -> ListString
        __init__(std::list<(std::string)> self, std::list< std::string >::size_type size) -> ListString
        __init__(std::list<(std::string)> self, std::list< std::string >::size_type size, std::list< std::string >::value_type const & value) -> ListString

        1
        """
        this = _libtypes.new_ListString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(ListString self, std::list< std::string >::value_type const & x)

        1
        """
        return _libtypes.ListString_push_back(self, *args)

    def front(self):
        """
        front(ListString self) -> std::list< std::string >::value_type const &

        1
        """
        return _libtypes.ListString_front(self)

    def back(self):
        """
        back(ListString self) -> std::list< std::string >::value_type const &

        1
        """
        return _libtypes.ListString_back(self)

    def assign(self, *args):
        """
        assign(ListString self, std::list< std::string >::size_type n, std::list< std::string >::value_type const & x)

        1
        """
        return _libtypes.ListString_assign(self, *args)

    def resize(self, *args):
        """
        resize(ListString self, std::list< std::string >::size_type new_size)
        resize(ListString self, std::list< std::string >::size_type new_size, std::list< std::string >::value_type const & x)

        1
        """
        return _libtypes.ListString_resize(self, *args)

    def insert(self, *args):
        """
        insert(ListString self, std::list< std::string >::iterator pos, std::list< std::string >::value_type const & x) -> std::list< std::string >::iterator
        insert(ListString self, std::list< std::string >::iterator pos, std::list< std::string >::size_type n, std::list< std::string >::value_type const & x)

        1
        """
        return _libtypes.ListString_insert(self, *args)

    def pop_front(self):
        """
        pop_front(ListString self)

        1
        """
        return _libtypes.ListString_pop_front(self)

    def push_front(self, *args):
        """
        push_front(ListString self, std::list< std::string >::value_type const & x)

        1
        """
        return _libtypes.ListString_push_front(self, *args)

    def reverse(self):
        """
        reverse(ListString self)

        1
        """
        return _libtypes.ListString_reverse(self)

    __swig_destroy__ = _libtypes.delete_ListString
    __del__ = lambda self : None;
ListString_swigregister = _libtypes.ListString_swigregister
ListString_swigregister(ListString)

class ArgumentList(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgumentList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArgumentList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(ArgumentList self) -> SwigPyIterator

        1
        """
        return _libtypes.ArgumentList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(ArgumentList self) -> bool

        1
        """
        return _libtypes.ArgumentList___nonzero__(self)

    def __bool__(self):
        """
        __bool__(ArgumentList self) -> bool

        1
        """
        return _libtypes.ArgumentList___bool__(self)

    def __len__(self):
        """
        __len__(ArgumentList self) -> std::list< DFF::Argument * >::size_type

        1
        """
        return _libtypes.ArgumentList___len__(self)

    def pop(self):
        """
        pop(ArgumentList self) -> Argument

        1
        """
        return _libtypes.ArgumentList_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(ArgumentList self, std::list< DFF::Argument * >::difference_type i, std::list< DFF::Argument * >::difference_type j) -> ArgumentList

        1
        """
        return _libtypes.ArgumentList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ArgumentList self, std::list< DFF::Argument * >::difference_type i, std::list< DFF::Argument * >::difference_type j, 
            ArgumentList v=std::list< DFF::Argument *,std::allocator< DFF::Argument * > >())
        __setslice__(ArgumentList self, std::list< DFF::Argument * >::difference_type i, std::list< DFF::Argument * >::difference_type j)

        1
        """
        return _libtypes.ArgumentList___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(ArgumentList self, std::list< DFF::Argument * >::difference_type i, std::list< DFF::Argument * >::difference_type j)

        1
        """
        return _libtypes.ArgumentList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ArgumentList self, std::list< DFF::Argument * >::difference_type i)
        __delitem__(ArgumentList self, PySliceObject * slice)

        1
        """
        return _libtypes.ArgumentList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ArgumentList self, PySliceObject * slice) -> ArgumentList
        __getitem__(ArgumentList self, std::list< DFF::Argument * >::difference_type i) -> Argument

        1
        """
        return _libtypes.ArgumentList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ArgumentList self, PySliceObject * slice, ArgumentList v)
        __setitem__(ArgumentList self, PySliceObject * slice)
        __setitem__(ArgumentList self, std::list< DFF::Argument * >::difference_type i, Argument x)

        1
        """
        return _libtypes.ArgumentList___setitem__(self, *args)

    def append(self, *args):
        """
        append(ArgumentList self, Argument x)

        1
        """
        return _libtypes.ArgumentList_append(self, *args)

    def empty(self):
        """
        empty(ArgumentList self) -> bool

        1
        """
        return _libtypes.ArgumentList_empty(self)

    def size(self):
        """
        size(ArgumentList self) -> std::list< DFF::Argument * >::size_type

        1
        """
        return _libtypes.ArgumentList_size(self)

    def clear(self):
        """
        clear(ArgumentList self)

        1
        """
        return _libtypes.ArgumentList_clear(self)

    def swap(self, *args):
        """
        swap(ArgumentList self, ArgumentList v)

        1
        """
        return _libtypes.ArgumentList_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(ArgumentList self) -> std::list< DFF::Argument * >::allocator_type

        1
        """
        return _libtypes.ArgumentList_get_allocator(self)

    def begin(self):
        """
        begin(ArgumentList self) -> std::list< DFF::Argument * >::iterator

        1
        """
        return _libtypes.ArgumentList_begin(self)

    def end(self):
        """
        end(ArgumentList self) -> std::list< DFF::Argument * >::iterator

        1
        """
        return _libtypes.ArgumentList_end(self)

    def rbegin(self):
        """
        rbegin(ArgumentList self) -> std::list< DFF::Argument * >::reverse_iterator

        1
        """
        return _libtypes.ArgumentList_rbegin(self)

    def rend(self):
        """
        rend(ArgumentList self) -> std::list< DFF::Argument * >::reverse_iterator

        1
        """
        return _libtypes.ArgumentList_rend(self)

    def pop_back(self):
        """
        pop_back(ArgumentList self)

        1
        """
        return _libtypes.ArgumentList_pop_back(self)

    def erase(self, *args):
        """
        erase(ArgumentList self, std::list< DFF::Argument * >::iterator pos) -> std::list< DFF::Argument * >::iterator
        erase(ArgumentList self, std::list< DFF::Argument * >::iterator first, std::list< DFF::Argument * >::iterator last) -> std::list< DFF::Argument * >::iterator

        1
        """
        return _libtypes.ArgumentList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(p.DFF::Argument)> self) -> ArgumentList
        __init__(std::list<(p.DFF::Argument)> self, ArgumentList arg2) -> ArgumentList
        __init__(std::list<(p.DFF::Argument)> self, std::list< DFF::Argument * >::size_type size) -> ArgumentList
        __init__(std::list<(p.DFF::Argument)> self, std::list< DFF::Argument * >::size_type size, Argument value) -> ArgumentList

        1
        """
        this = _libtypes.new_ArgumentList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(ArgumentList self, Argument x)

        1
        """
        return _libtypes.ArgumentList_push_back(self, *args)

    def front(self):
        """
        front(ArgumentList self) -> Argument

        1
        """
        return _libtypes.ArgumentList_front(self)

    def back(self):
        """
        back(ArgumentList self) -> Argument

        1
        """
        return _libtypes.ArgumentList_back(self)

    def assign(self, *args):
        """
        assign(ArgumentList self, std::list< DFF::Argument * >::size_type n, Argument x)

        1
        """
        return _libtypes.ArgumentList_assign(self, *args)

    def resize(self, *args):
        """
        resize(ArgumentList self, std::list< DFF::Argument * >::size_type new_size)
        resize(ArgumentList self, std::list< DFF::Argument * >::size_type new_size, Argument x)

        1
        """
        return _libtypes.ArgumentList_resize(self, *args)

    def insert(self, *args):
        """
        insert(ArgumentList self, std::list< DFF::Argument * >::iterator pos, Argument x) -> std::list< DFF::Argument * >::iterator
        insert(ArgumentList self, std::list< DFF::Argument * >::iterator pos, std::list< DFF::Argument * >::size_type n, 
            Argument x)

        1
        """
        return _libtypes.ArgumentList_insert(self, *args)

    def pop_front(self):
        """
        pop_front(ArgumentList self)

        1
        """
        return _libtypes.ArgumentList_pop_front(self)

    def push_front(self, *args):
        """
        push_front(ArgumentList self, Argument x)

        1
        """
        return _libtypes.ArgumentList_push_front(self, *args)

    def remove(self, *args):
        """
        remove(ArgumentList self, Argument x)

        1
        """
        return _libtypes.ArgumentList_remove(self, *args)

    def unique(self):
        """
        unique(ArgumentList self)

        1
        """
        return _libtypes.ArgumentList_unique(self)

    def reverse(self):
        """
        reverse(ArgumentList self)

        1
        """
        return _libtypes.ArgumentList_reverse(self)

    def sort(self):
        """
        sort(ArgumentList self)

        1
        """
        return _libtypes.ArgumentList_sort(self)

    def merge(self, *args):
        """
        merge(ArgumentList self, ArgumentList x)

        1
        """
        return _libtypes.ArgumentList_merge(self, *args)

    __swig_destroy__ = _libtypes.delete_ArgumentList
    __del__ = lambda self : None;
ArgumentList_swigregister = _libtypes.ArgumentList_swigregister
ArgumentList_swigregister(ArgumentList)

class ConfigList(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(ConfigList self) -> SwigPyIterator

        1
        """
        return _libtypes.ConfigList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(ConfigList self) -> bool

        1
        """
        return _libtypes.ConfigList___nonzero__(self)

    def __bool__(self):
        """
        __bool__(ConfigList self) -> bool

        1
        """
        return _libtypes.ConfigList___bool__(self)

    def __len__(self):
        """
        __len__(ConfigList self) -> std::list< DFF::Config * >::size_type

        1
        """
        return _libtypes.ConfigList___len__(self)

    def pop(self):
        """
        pop(ConfigList self) -> Config

        1
        """
        return _libtypes.ConfigList_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(ConfigList self, std::list< DFF::Config * >::difference_type i, std::list< DFF::Config * >::difference_type j) -> ConfigList

        1
        """
        return _libtypes.ConfigList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ConfigList self, std::list< DFF::Config * >::difference_type i, std::list< DFF::Config * >::difference_type j, 
            ConfigList v=std::list< DFF::Config *,std::allocator< DFF::Config * > >())
        __setslice__(ConfigList self, std::list< DFF::Config * >::difference_type i, std::list< DFF::Config * >::difference_type j)

        1
        """
        return _libtypes.ConfigList___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(ConfigList self, std::list< DFF::Config * >::difference_type i, std::list< DFF::Config * >::difference_type j)

        1
        """
        return _libtypes.ConfigList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ConfigList self, std::list< DFF::Config * >::difference_type i)
        __delitem__(ConfigList self, PySliceObject * slice)

        1
        """
        return _libtypes.ConfigList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ConfigList self, PySliceObject * slice) -> ConfigList
        __getitem__(ConfigList self, std::list< DFF::Config * >::difference_type i) -> Config

        1
        """
        return _libtypes.ConfigList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ConfigList self, PySliceObject * slice, ConfigList v)
        __setitem__(ConfigList self, PySliceObject * slice)
        __setitem__(ConfigList self, std::list< DFF::Config * >::difference_type i, Config x)

        1
        """
        return _libtypes.ConfigList___setitem__(self, *args)

    def append(self, *args):
        """
        append(ConfigList self, Config x)

        1
        """
        return _libtypes.ConfigList_append(self, *args)

    def empty(self):
        """
        empty(ConfigList self) -> bool

        1
        """
        return _libtypes.ConfigList_empty(self)

    def size(self):
        """
        size(ConfigList self) -> std::list< DFF::Config * >::size_type

        1
        """
        return _libtypes.ConfigList_size(self)

    def clear(self):
        """
        clear(ConfigList self)

        1
        """
        return _libtypes.ConfigList_clear(self)

    def swap(self, *args):
        """
        swap(ConfigList self, ConfigList v)

        1
        """
        return _libtypes.ConfigList_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(ConfigList self) -> std::list< DFF::Config * >::allocator_type

        1
        """
        return _libtypes.ConfigList_get_allocator(self)

    def begin(self):
        """
        begin(ConfigList self) -> std::list< DFF::Config * >::iterator

        1
        """
        return _libtypes.ConfigList_begin(self)

    def end(self):
        """
        end(ConfigList self) -> std::list< DFF::Config * >::iterator

        1
        """
        return _libtypes.ConfigList_end(self)

    def rbegin(self):
        """
        rbegin(ConfigList self) -> std::list< DFF::Config * >::reverse_iterator

        1
        """
        return _libtypes.ConfigList_rbegin(self)

    def rend(self):
        """
        rend(ConfigList self) -> std::list< DFF::Config * >::reverse_iterator

        1
        """
        return _libtypes.ConfigList_rend(self)

    def pop_back(self):
        """
        pop_back(ConfigList self)

        1
        """
        return _libtypes.ConfigList_pop_back(self)

    def erase(self, *args):
        """
        erase(ConfigList self, std::list< DFF::Config * >::iterator pos) -> std::list< DFF::Config * >::iterator
        erase(ConfigList self, std::list< DFF::Config * >::iterator first, std::list< DFF::Config * >::iterator last) -> std::list< DFF::Config * >::iterator

        1
        """
        return _libtypes.ConfigList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(p.DFF::Config)> self) -> ConfigList
        __init__(std::list<(p.DFF::Config)> self, ConfigList arg2) -> ConfigList
        __init__(std::list<(p.DFF::Config)> self, std::list< DFF::Config * >::size_type size) -> ConfigList
        __init__(std::list<(p.DFF::Config)> self, std::list< DFF::Config * >::size_type size, Config value) -> ConfigList

        1
        """
        this = _libtypes.new_ConfigList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(ConfigList self, Config x)

        1
        """
        return _libtypes.ConfigList_push_back(self, *args)

    def front(self):
        """
        front(ConfigList self) -> Config

        1
        """
        return _libtypes.ConfigList_front(self)

    def back(self):
        """
        back(ConfigList self) -> Config

        1
        """
        return _libtypes.ConfigList_back(self)

    def assign(self, *args):
        """
        assign(ConfigList self, std::list< DFF::Config * >::size_type n, Config x)

        1
        """
        return _libtypes.ConfigList_assign(self, *args)

    def resize(self, *args):
        """
        resize(ConfigList self, std::list< DFF::Config * >::size_type new_size)
        resize(ConfigList self, std::list< DFF::Config * >::size_type new_size, Config x)

        1
        """
        return _libtypes.ConfigList_resize(self, *args)

    def insert(self, *args):
        """
        insert(ConfigList self, std::list< DFF::Config * >::iterator pos, Config x) -> std::list< DFF::Config * >::iterator
        insert(ConfigList self, std::list< DFF::Config * >::iterator pos, std::list< DFF::Config * >::size_type n, 
            Config x)

        1
        """
        return _libtypes.ConfigList_insert(self, *args)

    def pop_front(self):
        """
        pop_front(ConfigList self)

        1
        """
        return _libtypes.ConfigList_pop_front(self)

    def push_front(self, *args):
        """
        push_front(ConfigList self, Config x)

        1
        """
        return _libtypes.ConfigList_push_front(self, *args)

    def remove(self, *args):
        """
        remove(ConfigList self, Config x)

        1
        """
        return _libtypes.ConfigList_remove(self, *args)

    def unique(self):
        """
        unique(ConfigList self)

        1
        """
        return _libtypes.ConfigList_unique(self)

    def reverse(self):
        """
        reverse(ConfigList self)

        1
        """
        return _libtypes.ConfigList_reverse(self)

    def sort(self):
        """
        sort(ConfigList self)

        1
        """
        return _libtypes.ConfigList_sort(self)

    def merge(self, *args):
        """
        merge(ConfigList self, ConfigList x)

        1
        """
        return _libtypes.ConfigList_merge(self, *args)

    __swig_destroy__ = _libtypes.delete_ConfigList
    __del__ = lambda self : None;
ConfigList_swigregister = _libtypes.ConfigList_swigregister
ConfigList_swigregister(ConfigList)

class ConstantList(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(ConstantList self) -> SwigPyIterator

        1
        """
        return _libtypes.ConstantList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(ConstantList self) -> bool

        1
        """
        return _libtypes.ConstantList___nonzero__(self)

    def __bool__(self):
        """
        __bool__(ConstantList self) -> bool

        1
        """
        return _libtypes.ConstantList___bool__(self)

    def __len__(self):
        """
        __len__(ConstantList self) -> std::list< DFF::Constant * >::size_type

        1
        """
        return _libtypes.ConstantList___len__(self)

    def pop(self):
        """
        pop(ConstantList self) -> Constant

        1
        """
        return _libtypes.ConstantList_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(ConstantList self, std::list< DFF::Constant * >::difference_type i, std::list< DFF::Constant * >::difference_type j) -> ConstantList

        1
        """
        return _libtypes.ConstantList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ConstantList self, std::list< DFF::Constant * >::difference_type i, std::list< DFF::Constant * >::difference_type j, 
            ConstantList v=std::list< DFF::Constant *,std::allocator< DFF::Constant * > >())
        __setslice__(ConstantList self, std::list< DFF::Constant * >::difference_type i, std::list< DFF::Constant * >::difference_type j)

        1
        """
        return _libtypes.ConstantList___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(ConstantList self, std::list< DFF::Constant * >::difference_type i, std::list< DFF::Constant * >::difference_type j)

        1
        """
        return _libtypes.ConstantList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ConstantList self, std::list< DFF::Constant * >::difference_type i)
        __delitem__(ConstantList self, PySliceObject * slice)

        1
        """
        return _libtypes.ConstantList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ConstantList self, PySliceObject * slice) -> ConstantList
        __getitem__(ConstantList self, std::list< DFF::Constant * >::difference_type i) -> Constant

        1
        """
        return _libtypes.ConstantList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ConstantList self, PySliceObject * slice, ConstantList v)
        __setitem__(ConstantList self, PySliceObject * slice)
        __setitem__(ConstantList self, std::list< DFF::Constant * >::difference_type i, Constant x)

        1
        """
        return _libtypes.ConstantList___setitem__(self, *args)

    def append(self, *args):
        """
        append(ConstantList self, Constant x)

        1
        """
        return _libtypes.ConstantList_append(self, *args)

    def empty(self):
        """
        empty(ConstantList self) -> bool

        1
        """
        return _libtypes.ConstantList_empty(self)

    def size(self):
        """
        size(ConstantList self) -> std::list< DFF::Constant * >::size_type

        1
        """
        return _libtypes.ConstantList_size(self)

    def clear(self):
        """
        clear(ConstantList self)

        1
        """
        return _libtypes.ConstantList_clear(self)

    def swap(self, *args):
        """
        swap(ConstantList self, ConstantList v)

        1
        """
        return _libtypes.ConstantList_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(ConstantList self) -> std::list< DFF::Constant * >::allocator_type

        1
        """
        return _libtypes.ConstantList_get_allocator(self)

    def begin(self):
        """
        begin(ConstantList self) -> std::list< DFF::Constant * >::iterator

        1
        """
        return _libtypes.ConstantList_begin(self)

    def end(self):
        """
        end(ConstantList self) -> std::list< DFF::Constant * >::iterator

        1
        """
        return _libtypes.ConstantList_end(self)

    def rbegin(self):
        """
        rbegin(ConstantList self) -> std::list< DFF::Constant * >::reverse_iterator

        1
        """
        return _libtypes.ConstantList_rbegin(self)

    def rend(self):
        """
        rend(ConstantList self) -> std::list< DFF::Constant * >::reverse_iterator

        1
        """
        return _libtypes.ConstantList_rend(self)

    def pop_back(self):
        """
        pop_back(ConstantList self)

        1
        """
        return _libtypes.ConstantList_pop_back(self)

    def erase(self, *args):
        """
        erase(ConstantList self, std::list< DFF::Constant * >::iterator pos) -> std::list< DFF::Constant * >::iterator
        erase(ConstantList self, std::list< DFF::Constant * >::iterator first, std::list< DFF::Constant * >::iterator last) -> std::list< DFF::Constant * >::iterator

        1
        """
        return _libtypes.ConstantList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(p.DFF::Constant)> self) -> ConstantList
        __init__(std::list<(p.DFF::Constant)> self, ConstantList arg2) -> ConstantList
        __init__(std::list<(p.DFF::Constant)> self, std::list< DFF::Constant * >::size_type size) -> ConstantList
        __init__(std::list<(p.DFF::Constant)> self, std::list< DFF::Constant * >::size_type size, Constant value) -> ConstantList

        1
        """
        this = _libtypes.new_ConstantList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(ConstantList self, Constant x)

        1
        """
        return _libtypes.ConstantList_push_back(self, *args)

    def front(self):
        """
        front(ConstantList self) -> Constant

        1
        """
        return _libtypes.ConstantList_front(self)

    def back(self):
        """
        back(ConstantList self) -> Constant

        1
        """
        return _libtypes.ConstantList_back(self)

    def assign(self, *args):
        """
        assign(ConstantList self, std::list< DFF::Constant * >::size_type n, Constant x)

        1
        """
        return _libtypes.ConstantList_assign(self, *args)

    def resize(self, *args):
        """
        resize(ConstantList self, std::list< DFF::Constant * >::size_type new_size)
        resize(ConstantList self, std::list< DFF::Constant * >::size_type new_size, Constant x)

        1
        """
        return _libtypes.ConstantList_resize(self, *args)

    def insert(self, *args):
        """
        insert(ConstantList self, std::list< DFF::Constant * >::iterator pos, Constant x) -> std::list< DFF::Constant * >::iterator
        insert(ConstantList self, std::list< DFF::Constant * >::iterator pos, std::list< DFF::Constant * >::size_type n, 
            Constant x)

        1
        """
        return _libtypes.ConstantList_insert(self, *args)

    def pop_front(self):
        """
        pop_front(ConstantList self)

        1
        """
        return _libtypes.ConstantList_pop_front(self)

    def push_front(self, *args):
        """
        push_front(ConstantList self, Constant x)

        1
        """
        return _libtypes.ConstantList_push_front(self, *args)

    def remove(self, *args):
        """
        remove(ConstantList self, Constant x)

        1
        """
        return _libtypes.ConstantList_remove(self, *args)

    def unique(self):
        """
        unique(ConstantList self)

        1
        """
        return _libtypes.ConstantList_unique(self)

    def reverse(self):
        """
        reverse(ConstantList self)

        1
        """
        return _libtypes.ConstantList_reverse(self)

    def sort(self):
        """
        sort(ConstantList self)

        1
        """
        return _libtypes.ConstantList_sort(self)

    def merge(self, *args):
        """
        merge(ConstantList self, ConstantList x)

        1
        """
        return _libtypes.ConstantList_merge(self, *args)

    __swig_destroy__ = _libtypes.delete_ConstantList
    __del__ = lambda self : None;
ConstantList_swigregister = _libtypes.ConstantList_swigregister
ConstantList_swigregister(ConstantList)

class VList(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(VList self) -> SwigPyIterator

        1
        """
        return _libtypes.VList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(VList self) -> bool

        1
        """
        return _libtypes.VList___nonzero__(self)

    def __bool__(self):
        """
        __bool__(VList self) -> bool

        1
        """
        return _libtypes.VList___bool__(self)

    def __len__(self):
        """
        __len__(VList self) -> std::list< DFF::RCPtr< DFF::Variant > >::size_type

        1
        """
        return _libtypes.VList___len__(self)

    def pop(self):
        """
        pop(VList self) -> RCVariant

        1
        """
        return _libtypes.VList_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(VList self, std::list< DFF::RCPtr< DFF::Variant > >::difference_type i, std::list< DFF::RCPtr< DFF::Variant > >::difference_type j) -> VList

        1
        """
        return _libtypes.VList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(VList self, std::list< DFF::RCPtr< DFF::Variant > >::difference_type i, std::list< DFF::RCPtr< DFF::Variant > >::difference_type j, 
            VList v=std::list< DFF::RCPtr< DFF::Variant >,std::allocator< DFF::RCPtr< DFF::Variant > > >())
        __setslice__(VList self, std::list< DFF::RCPtr< DFF::Variant > >::difference_type i, std::list< DFF::RCPtr< DFF::Variant > >::difference_type j)

        1
        """
        return _libtypes.VList___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(VList self, std::list< DFF::RCPtr< DFF::Variant > >::difference_type i, std::list< DFF::RCPtr< DFF::Variant > >::difference_type j)

        1
        """
        return _libtypes.VList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(VList self, std::list< DFF::RCPtr< DFF::Variant > >::difference_type i)
        __delitem__(VList self, PySliceObject * slice)

        1
        """
        return _libtypes.VList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(VList self, PySliceObject * slice) -> VList
        __getitem__(VList self, std::list< DFF::RCPtr< DFF::Variant > >::difference_type i) -> RCVariant

        1
        """
        return _libtypes.VList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(VList self, PySliceObject * slice, VList v)
        __setitem__(VList self, PySliceObject * slice)
        __setitem__(VList self, std::list< DFF::RCPtr< DFF::Variant > >::difference_type i, RCVariant x)

        1
        """
        return _libtypes.VList___setitem__(self, *args)

    def empty(self):
        """
        empty(VList self) -> bool

        1
        """
        return _libtypes.VList_empty(self)

    def size(self):
        """
        size(VList self) -> std::list< DFF::RCPtr< DFF::Variant > >::size_type

        1
        """
        return _libtypes.VList_size(self)

    def clear(self):
        """
        clear(VList self)

        1
        """
        return _libtypes.VList_clear(self)

    def swap(self, *args):
        """
        swap(VList self, VList v)

        1
        """
        return _libtypes.VList_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(VList self) -> std::list< DFF::RCPtr< DFF::Variant > >::allocator_type

        1
        """
        return _libtypes.VList_get_allocator(self)

    def begin(self):
        """
        begin(VList self) -> std::list< DFF::RCPtr< DFF::Variant > >::iterator

        1
        """
        return _libtypes.VList_begin(self)

    def end(self):
        """
        end(VList self) -> std::list< DFF::RCPtr< DFF::Variant > >::iterator

        1
        """
        return _libtypes.VList_end(self)

    def rbegin(self):
        """
        rbegin(VList self) -> std::list< DFF::RCPtr< DFF::Variant > >::reverse_iterator

        1
        """
        return _libtypes.VList_rbegin(self)

    def rend(self):
        """
        rend(VList self) -> std::list< DFF::RCPtr< DFF::Variant > >::reverse_iterator

        1
        """
        return _libtypes.VList_rend(self)

    def pop_back(self):
        """
        pop_back(VList self)

        1
        """
        return _libtypes.VList_pop_back(self)

    def erase(self, *args):
        """
        erase(VList self, std::list< DFF::RCPtr< DFF::Variant > >::iterator pos) -> std::list< DFF::RCPtr< DFF::Variant > >::iterator
        erase(VList self, std::list< DFF::RCPtr< DFF::Variant > >::iterator first, std::list< DFF::RCPtr< DFF::Variant > >::iterator last) -> std::list< DFF::RCPtr< DFF::Variant > >::iterator

        1
        """
        return _libtypes.VList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(DFF::RCPtr<(DFF::Variant)>)> self) -> VList
        __init__(std::list<(DFF::RCPtr<(DFF::Variant)>)> self, VList arg2) -> VList
        __init__(std::list<(DFF::RCPtr<(DFF::Variant)>)> self, std::list< DFF::RCPtr< DFF::Variant > >::size_type size) -> VList
        __init__(std::list<(DFF::RCPtr<(DFF::Variant)>)> self, std::list< DFF::RCPtr< DFF::Variant > >::size_type size, RCVariant value) -> VList

        1
        """
        this = _libtypes.new_VList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(VList self, RCVariant x)

        1
        """
        return _libtypes.VList_push_back(self, *args)

    def front(self):
        """
        front(VList self) -> RCVariant

        1
        """
        return _libtypes.VList_front(self)

    def back(self):
        """
        back(VList self) -> RCVariant

        1
        """
        return _libtypes.VList_back(self)

    def assign(self, *args):
        """
        assign(VList self, std::list< DFF::RCPtr< DFF::Variant > >::size_type n, RCVariant x)

        1
        """
        return _libtypes.VList_assign(self, *args)

    def resize(self, *args):
        """
        resize(VList self, std::list< DFF::RCPtr< DFF::Variant > >::size_type new_size)
        resize(VList self, std::list< DFF::RCPtr< DFF::Variant > >::size_type new_size, RCVariant x)

        1
        """
        return _libtypes.VList_resize(self, *args)

    def insert(self, *args):
        """
        insert(VList self, std::list< DFF::RCPtr< DFF::Variant > >::iterator pos, RCVariant x) -> std::list< DFF::RCPtr< DFF::Variant > >::iterator
        insert(VList self, std::list< DFF::RCPtr< DFF::Variant > >::iterator pos, std::list< DFF::RCPtr< DFF::Variant > >::size_type n, 
            RCVariant x)

        1
        """
        return _libtypes.VList_insert(self, *args)

    def pop_front(self):
        """
        pop_front(VList self)

        1
        """
        return _libtypes.VList_pop_front(self)

    def push_front(self, *args):
        """
        push_front(VList self, RCVariant x)

        1
        """
        return _libtypes.VList_push_front(self, *args)

    def reverse(self):
        """
        reverse(VList self)

        1
        """
        return _libtypes.VList_reverse(self)

    def __str__(self):
        """
        __str__(VList self) -> char *

        1
        """
        return _libtypes.VList___str__(self)

    def append(self, *args):
        """
        append(VList self, RCVariant x)
        append(VList self, VList other)
        append(VList self, VMap other)

        1
        """
        return _libtypes.VList_append(self, *args)

    def __eq__(self, *args):
        """
        __eq__(VList self, PyObject * obj) -> bool

        1
        """
        return _libtypes.VList___eq__(self, *args)

    __swig_destroy__ = _libtypes.delete_VList
    __del__ = lambda self : None;
VList_swigregister = _libtypes.VList_swigregister
VList_swigregister(VList)

class VMap(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(VMap self) -> SwigPyIterator

        1
        """
        return _libtypes.VMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(VMap self) -> bool

        1
        """
        return _libtypes.VMap___nonzero__(self)

    def __bool__(self):
        """
        __bool__(VMap self) -> bool

        1
        """
        return _libtypes.VMap___bool__(self)

    def __len__(self):
        """
        __len__(VMap self) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::size_type

        1
        """
        return _libtypes.VMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & key) -> RCVariant

        1
        """
        return _libtypes.VMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & key)

        1
        """
        return _libtypes.VMap___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & key) -> bool

        1
        """
        return _libtypes.VMap_has_key(self, *args)

    def keys(self):
        """
        keys(VMap self) -> PyObject *

        1
        """
        return _libtypes.VMap_keys(self)

    def values(self):
        """
        values(VMap self) -> PyObject *

        1
        """
        return _libtypes.VMap_values(self)

    def items(self):
        """
        items(VMap self) -> PyObject *

        1
        """
        return _libtypes.VMap_items(self)

    def __contains__(self, *args):
        """
        __contains__(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & key) -> bool

        1
        """
        return _libtypes.VMap___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(VMap self) -> SwigPyIterator

        1
        """
        return _libtypes.VMap_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(VMap self) -> SwigPyIterator

        1
        """
        return _libtypes.VMap_value_iterator(self)

    def asdict(self):
        """
        asdict(VMap self) -> PyObject *

        1
        """
        return _libtypes.VMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,DFF::RCPtr<(DFF::Variant)>)> self, std::less< std::string > const & arg2) -> VMap
        __init__(std::map<(std::string,DFF::RCPtr<(DFF::Variant)>)> self) -> VMap
        __init__(std::map<(std::string,DFF::RCPtr<(DFF::Variant)>)> self, VMap arg2) -> VMap

        1
        """
        this = _libtypes.new_VMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(VMap self) -> bool

        1
        """
        return _libtypes.VMap_empty(self)

    def size(self):
        """
        size(VMap self) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::size_type

        1
        """
        return _libtypes.VMap_size(self)

    def clear(self):
        """
        clear(VMap self)

        1
        """
        return _libtypes.VMap_clear(self)

    def swap(self, *args):
        """
        swap(VMap self, VMap v)

        1
        """
        return _libtypes.VMap_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(VMap self) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::allocator_type

        1
        """
        return _libtypes.VMap_get_allocator(self)

    def begin(self):
        """
        begin(VMap self) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::iterator

        1
        """
        return _libtypes.VMap_begin(self)

    def end(self):
        """
        end(VMap self) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::iterator

        1
        """
        return _libtypes.VMap_end(self)

    def rbegin(self):
        """
        rbegin(VMap self) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::reverse_iterator

        1
        """
        return _libtypes.VMap_rbegin(self)

    def rend(self):
        """
        rend(VMap self) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::reverse_iterator

        1
        """
        return _libtypes.VMap_rend(self)

    def count(self, *args):
        """
        count(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & x) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::size_type

        1
        """
        return _libtypes.VMap_count(self, *args)

    def erase(self, *args):
        """
        erase(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & x) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::size_type
        erase(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::iterator position)
        erase(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::iterator first, std::map< std::string,DFF::RCPtr< DFF::Variant > >::iterator last)

        1
        """
        return _libtypes.VMap_erase(self, *args)

    def find(self, *args):
        """
        find(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & x) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::iterator

        1
        """
        return _libtypes.VMap_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & x) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::iterator

        1
        """
        return _libtypes.VMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & x) -> std::map< std::string,DFF::RCPtr< DFF::Variant > >::iterator

        1
        """
        return _libtypes.VMap_upper_bound(self, *args)

    def __str__(self):
        """
        __str__(VMap self) -> char *

        1
        """
        return _libtypes.VMap___str__(self)

    def __setitem__(self, *args):
        """
        __setitem__(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & key)
        __setitem__(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant > >::key_type const & key, RCVariant x)
        __setitem__(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant >,std::less< std::string >,std::allocator< std::pair< std::string const,DFF::RCPtr< DFF::Variant > > > >::key_type const & key, 
            VMap vmap)
        __setitem__(VMap self, std::map< std::string,DFF::RCPtr< DFF::Variant >,std::less< std::string >,std::allocator< std::pair< std::string const,DFF::RCPtr< DFF::Variant > > > >::key_type const & key, 
            VList vlist)

        1
        """
        return _libtypes.VMap___setitem__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(VMap self, PyObject * obj) -> bool

        1
        """
        return _libtypes.VMap___eq__(self, *args)

    __swig_destroy__ = _libtypes.delete_VMap
    __del__ = lambda self : None;
VMap_swigregister = _libtypes.VMap_swigregister
VMap_swigregister(VMap)

class MapDateTime(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapDateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapDateTime, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(MapDateTime self) -> SwigPyIterator

        1
        """
        return _libtypes.MapDateTime_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(MapDateTime self) -> bool

        1
        """
        return _libtypes.MapDateTime___nonzero__(self)

    def __bool__(self):
        """
        __bool__(MapDateTime self) -> bool

        1
        """
        return _libtypes.MapDateTime___bool__(self)

    def __len__(self):
        """
        __len__(MapDateTime self) -> std::map< std::string,DFF::DateTime * >::size_type

        1
        """
        return _libtypes.MapDateTime___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & key) -> DateTime

        1
        """
        return _libtypes.MapDateTime___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & key)

        1
        """
        return _libtypes.MapDateTime___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapDateTime_has_key(self, *args)

    def keys(self):
        """
        keys(MapDateTime self) -> PyObject *

        1
        """
        return _libtypes.MapDateTime_keys(self)

    def values(self):
        """
        values(MapDateTime self) -> PyObject *

        1
        """
        return _libtypes.MapDateTime_values(self)

    def items(self):
        """
        items(MapDateTime self) -> PyObject *

        1
        """
        return _libtypes.MapDateTime_items(self)

    def __contains__(self, *args):
        """
        __contains__(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapDateTime___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(MapDateTime self) -> SwigPyIterator

        1
        """
        return _libtypes.MapDateTime_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(MapDateTime self) -> SwigPyIterator

        1
        """
        return _libtypes.MapDateTime_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & key)
        __setitem__(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & key, DateTime x)

        1
        """
        return _libtypes.MapDateTime___setitem__(self, *args)

    def asdict(self):
        """
        asdict(MapDateTime self) -> PyObject *

        1
        """
        return _libtypes.MapDateTime_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,p.DFF::DateTime)> self, std::less< std::string > const & arg2) -> MapDateTime
        __init__(std::map<(std::string,p.DFF::DateTime)> self) -> MapDateTime
        __init__(std::map<(std::string,p.DFF::DateTime)> self, MapDateTime arg2) -> MapDateTime

        1
        """
        this = _libtypes.new_MapDateTime(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(MapDateTime self) -> bool

        1
        """
        return _libtypes.MapDateTime_empty(self)

    def size(self):
        """
        size(MapDateTime self) -> std::map< std::string,DFF::DateTime * >::size_type

        1
        """
        return _libtypes.MapDateTime_size(self)

    def clear(self):
        """
        clear(MapDateTime self)

        1
        """
        return _libtypes.MapDateTime_clear(self)

    def swap(self, *args):
        """
        swap(MapDateTime self, MapDateTime v)

        1
        """
        return _libtypes.MapDateTime_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(MapDateTime self) -> std::map< std::string,DFF::DateTime * >::allocator_type

        1
        """
        return _libtypes.MapDateTime_get_allocator(self)

    def begin(self):
        """
        begin(MapDateTime self) -> std::map< std::string,DFF::DateTime * >::iterator

        1
        """
        return _libtypes.MapDateTime_begin(self)

    def end(self):
        """
        end(MapDateTime self) -> std::map< std::string,DFF::DateTime * >::iterator

        1
        """
        return _libtypes.MapDateTime_end(self)

    def rbegin(self):
        """
        rbegin(MapDateTime self) -> std::map< std::string,DFF::DateTime * >::reverse_iterator

        1
        """
        return _libtypes.MapDateTime_rbegin(self)

    def rend(self):
        """
        rend(MapDateTime self) -> std::map< std::string,DFF::DateTime * >::reverse_iterator

        1
        """
        return _libtypes.MapDateTime_rend(self)

    def count(self, *args):
        """
        count(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & x) -> std::map< std::string,DFF::DateTime * >::size_type

        1
        """
        return _libtypes.MapDateTime_count(self, *args)

    def erase(self, *args):
        """
        erase(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & x) -> std::map< std::string,DFF::DateTime * >::size_type
        erase(MapDateTime self, std::map< std::string,DFF::DateTime * >::iterator position)
        erase(MapDateTime self, std::map< std::string,DFF::DateTime * >::iterator first, std::map< std::string,DFF::DateTime * >::iterator last)

        1
        """
        return _libtypes.MapDateTime_erase(self, *args)

    def find(self, *args):
        """
        find(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & x) -> std::map< std::string,DFF::DateTime * >::iterator

        1
        """
        return _libtypes.MapDateTime_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & x) -> std::map< std::string,DFF::DateTime * >::iterator

        1
        """
        return _libtypes.MapDateTime_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(MapDateTime self, std::map< std::string,DFF::DateTime * >::key_type const & x) -> std::map< std::string,DFF::DateTime * >::iterator

        1
        """
        return _libtypes.MapDateTime_upper_bound(self, *args)

    __swig_destroy__ = _libtypes.delete_MapDateTime
    __del__ = lambda self : None;
MapDateTime_swigregister = _libtypes.MapDateTime_swigregister
MapDateTime_swigregister(MapDateTime)

class MapConstant(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapConstant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapConstant, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(MapConstant self) -> SwigPyIterator

        1
        """
        return _libtypes.MapConstant_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(MapConstant self) -> bool

        1
        """
        return _libtypes.MapConstant___nonzero__(self)

    def __bool__(self):
        """
        __bool__(MapConstant self) -> bool

        1
        """
        return _libtypes.MapConstant___bool__(self)

    def __len__(self):
        """
        __len__(MapConstant self) -> std::map< std::string,DFF::Constant * >::size_type

        1
        """
        return _libtypes.MapConstant___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & key) -> Constant

        1
        """
        return _libtypes.MapConstant___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & key)

        1
        """
        return _libtypes.MapConstant___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapConstant_has_key(self, *args)

    def keys(self):
        """
        keys(MapConstant self) -> PyObject *

        1
        """
        return _libtypes.MapConstant_keys(self)

    def values(self):
        """
        values(MapConstant self) -> PyObject *

        1
        """
        return _libtypes.MapConstant_values(self)

    def items(self):
        """
        items(MapConstant self) -> PyObject *

        1
        """
        return _libtypes.MapConstant_items(self)

    def __contains__(self, *args):
        """
        __contains__(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapConstant___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(MapConstant self) -> SwigPyIterator

        1
        """
        return _libtypes.MapConstant_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(MapConstant self) -> SwigPyIterator

        1
        """
        return _libtypes.MapConstant_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & key)
        __setitem__(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & key, Constant x)

        1
        """
        return _libtypes.MapConstant___setitem__(self, *args)

    def asdict(self):
        """
        asdict(MapConstant self) -> PyObject *

        1
        """
        return _libtypes.MapConstant_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,p.DFF::Constant)> self, std::less< std::string > const & arg2) -> MapConstant
        __init__(std::map<(std::string,p.DFF::Constant)> self) -> MapConstant
        __init__(std::map<(std::string,p.DFF::Constant)> self, MapConstant arg2) -> MapConstant

        1
        """
        this = _libtypes.new_MapConstant(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(MapConstant self) -> bool

        1
        """
        return _libtypes.MapConstant_empty(self)

    def size(self):
        """
        size(MapConstant self) -> std::map< std::string,DFF::Constant * >::size_type

        1
        """
        return _libtypes.MapConstant_size(self)

    def clear(self):
        """
        clear(MapConstant self)

        1
        """
        return _libtypes.MapConstant_clear(self)

    def swap(self, *args):
        """
        swap(MapConstant self, MapConstant v)

        1
        """
        return _libtypes.MapConstant_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(MapConstant self) -> std::map< std::string,DFF::Constant * >::allocator_type

        1
        """
        return _libtypes.MapConstant_get_allocator(self)

    def begin(self):
        """
        begin(MapConstant self) -> std::map< std::string,DFF::Constant * >::iterator

        1
        """
        return _libtypes.MapConstant_begin(self)

    def end(self):
        """
        end(MapConstant self) -> std::map< std::string,DFF::Constant * >::iterator

        1
        """
        return _libtypes.MapConstant_end(self)

    def rbegin(self):
        """
        rbegin(MapConstant self) -> std::map< std::string,DFF::Constant * >::reverse_iterator

        1
        """
        return _libtypes.MapConstant_rbegin(self)

    def rend(self):
        """
        rend(MapConstant self) -> std::map< std::string,DFF::Constant * >::reverse_iterator

        1
        """
        return _libtypes.MapConstant_rend(self)

    def count(self, *args):
        """
        count(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & x) -> std::map< std::string,DFF::Constant * >::size_type

        1
        """
        return _libtypes.MapConstant_count(self, *args)

    def erase(self, *args):
        """
        erase(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & x) -> std::map< std::string,DFF::Constant * >::size_type
        erase(MapConstant self, std::map< std::string,DFF::Constant * >::iterator position)
        erase(MapConstant self, std::map< std::string,DFF::Constant * >::iterator first, std::map< std::string,DFF::Constant * >::iterator last)

        1
        """
        return _libtypes.MapConstant_erase(self, *args)

    def find(self, *args):
        """
        find(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & x) -> std::map< std::string,DFF::Constant * >::iterator

        1
        """
        return _libtypes.MapConstant_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & x) -> std::map< std::string,DFF::Constant * >::iterator

        1
        """
        return _libtypes.MapConstant_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(MapConstant self, std::map< std::string,DFF::Constant * >::key_type const & x) -> std::map< std::string,DFF::Constant * >::iterator

        1
        """
        return _libtypes.MapConstant_upper_bound(self, *args)

    __swig_destroy__ = _libtypes.delete_MapConstant
    __del__ = lambda self : None;
MapConstant_swigregister = _libtypes.MapConstant_swigregister
MapConstant_swigregister(MapConstant)

class MapArgument(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapArgument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapArgument, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(MapArgument self) -> SwigPyIterator

        1
        """
        return _libtypes.MapArgument_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(MapArgument self) -> bool

        1
        """
        return _libtypes.MapArgument___nonzero__(self)

    def __bool__(self):
        """
        __bool__(MapArgument self) -> bool

        1
        """
        return _libtypes.MapArgument___bool__(self)

    def __len__(self):
        """
        __len__(MapArgument self) -> std::map< std::string,DFF::Argument * >::size_type

        1
        """
        return _libtypes.MapArgument___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & key) -> Argument

        1
        """
        return _libtypes.MapArgument___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & key)

        1
        """
        return _libtypes.MapArgument___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapArgument_has_key(self, *args)

    def keys(self):
        """
        keys(MapArgument self) -> PyObject *

        1
        """
        return _libtypes.MapArgument_keys(self)

    def values(self):
        """
        values(MapArgument self) -> PyObject *

        1
        """
        return _libtypes.MapArgument_values(self)

    def items(self):
        """
        items(MapArgument self) -> PyObject *

        1
        """
        return _libtypes.MapArgument_items(self)

    def __contains__(self, *args):
        """
        __contains__(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapArgument___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(MapArgument self) -> SwigPyIterator

        1
        """
        return _libtypes.MapArgument_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(MapArgument self) -> SwigPyIterator

        1
        """
        return _libtypes.MapArgument_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & key)
        __setitem__(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & key, Argument x)

        1
        """
        return _libtypes.MapArgument___setitem__(self, *args)

    def asdict(self):
        """
        asdict(MapArgument self) -> PyObject *

        1
        """
        return _libtypes.MapArgument_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,p.DFF::Argument)> self, std::less< std::string > const & arg2) -> MapArgument
        __init__(std::map<(std::string,p.DFF::Argument)> self) -> MapArgument
        __init__(std::map<(std::string,p.DFF::Argument)> self, MapArgument arg2) -> MapArgument

        1
        """
        this = _libtypes.new_MapArgument(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(MapArgument self) -> bool

        1
        """
        return _libtypes.MapArgument_empty(self)

    def size(self):
        """
        size(MapArgument self) -> std::map< std::string,DFF::Argument * >::size_type

        1
        """
        return _libtypes.MapArgument_size(self)

    def clear(self):
        """
        clear(MapArgument self)

        1
        """
        return _libtypes.MapArgument_clear(self)

    def swap(self, *args):
        """
        swap(MapArgument self, MapArgument v)

        1
        """
        return _libtypes.MapArgument_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(MapArgument self) -> std::map< std::string,DFF::Argument * >::allocator_type

        1
        """
        return _libtypes.MapArgument_get_allocator(self)

    def begin(self):
        """
        begin(MapArgument self) -> std::map< std::string,DFF::Argument * >::iterator

        1
        """
        return _libtypes.MapArgument_begin(self)

    def end(self):
        """
        end(MapArgument self) -> std::map< std::string,DFF::Argument * >::iterator

        1
        """
        return _libtypes.MapArgument_end(self)

    def rbegin(self):
        """
        rbegin(MapArgument self) -> std::map< std::string,DFF::Argument * >::reverse_iterator

        1
        """
        return _libtypes.MapArgument_rbegin(self)

    def rend(self):
        """
        rend(MapArgument self) -> std::map< std::string,DFF::Argument * >::reverse_iterator

        1
        """
        return _libtypes.MapArgument_rend(self)

    def count(self, *args):
        """
        count(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & x) -> std::map< std::string,DFF::Argument * >::size_type

        1
        """
        return _libtypes.MapArgument_count(self, *args)

    def erase(self, *args):
        """
        erase(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & x) -> std::map< std::string,DFF::Argument * >::size_type
        erase(MapArgument self, std::map< std::string,DFF::Argument * >::iterator position)
        erase(MapArgument self, std::map< std::string,DFF::Argument * >::iterator first, std::map< std::string,DFF::Argument * >::iterator last)

        1
        """
        return _libtypes.MapArgument_erase(self, *args)

    def find(self, *args):
        """
        find(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & x) -> std::map< std::string,DFF::Argument * >::iterator

        1
        """
        return _libtypes.MapArgument_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & x) -> std::map< std::string,DFF::Argument * >::iterator

        1
        """
        return _libtypes.MapArgument_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(MapArgument self, std::map< std::string,DFF::Argument * >::key_type const & x) -> std::map< std::string,DFF::Argument * >::iterator

        1
        """
        return _libtypes.MapArgument_upper_bound(self, *args)

    __swig_destroy__ = _libtypes.delete_MapArgument
    __del__ = lambda self : None;
MapArgument_swigregister = _libtypes.MapArgument_swigregister
MapArgument_swigregister(MapArgument)

class MapInt(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapInt, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(MapInt self) -> SwigPyIterator

        1
        """
        return _libtypes.MapInt_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(MapInt self) -> bool

        1
        """
        return _libtypes.MapInt___nonzero__(self)

    def __bool__(self):
        """
        __bool__(MapInt self) -> bool

        1
        """
        return _libtypes.MapInt___bool__(self)

    def __len__(self):
        """
        __len__(MapInt self) -> std::map< std::string,unsigned int >::size_type

        1
        """
        return _libtypes.MapInt___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(MapInt self, std::map< std::string,unsigned int >::key_type const & key) -> std::map< std::string,unsigned int >::mapped_type const &

        1
        """
        return _libtypes.MapInt___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(MapInt self, std::map< std::string,unsigned int >::key_type const & key)

        1
        """
        return _libtypes.MapInt___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(MapInt self, std::map< std::string,unsigned int >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapInt_has_key(self, *args)

    def keys(self):
        """
        keys(MapInt self) -> PyObject *

        1
        """
        return _libtypes.MapInt_keys(self)

    def values(self):
        """
        values(MapInt self) -> PyObject *

        1
        """
        return _libtypes.MapInt_values(self)

    def items(self):
        """
        items(MapInt self) -> PyObject *

        1
        """
        return _libtypes.MapInt_items(self)

    def __contains__(self, *args):
        """
        __contains__(MapInt self, std::map< std::string,unsigned int >::key_type const & key) -> bool

        1
        """
        return _libtypes.MapInt___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(MapInt self) -> SwigPyIterator

        1
        """
        return _libtypes.MapInt_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(MapInt self) -> SwigPyIterator

        1
        """
        return _libtypes.MapInt_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(MapInt self, std::map< std::string,unsigned int >::key_type const & key)
        __setitem__(MapInt self, std::map< std::string,unsigned int >::key_type const & key, std::map< std::string,unsigned int >::mapped_type const & x)

        1
        """
        return _libtypes.MapInt___setitem__(self, *args)

    def asdict(self):
        """
        asdict(MapInt self) -> PyObject *

        1
        """
        return _libtypes.MapInt_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,unsigned int)> self, std::less< std::string > const & arg2) -> MapInt
        __init__(std::map<(std::string,unsigned int)> self) -> MapInt
        __init__(std::map<(std::string,unsigned int)> self, MapInt arg2) -> MapInt

        1
        """
        this = _libtypes.new_MapInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(MapInt self) -> bool

        1
        """
        return _libtypes.MapInt_empty(self)

    def size(self):
        """
        size(MapInt self) -> std::map< std::string,unsigned int >::size_type

        1
        """
        return _libtypes.MapInt_size(self)

    def clear(self):
        """
        clear(MapInt self)

        1
        """
        return _libtypes.MapInt_clear(self)

    def swap(self, *args):
        """
        swap(MapInt self, MapInt v)

        1
        """
        return _libtypes.MapInt_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(MapInt self) -> std::map< std::string,unsigned int >::allocator_type

        1
        """
        return _libtypes.MapInt_get_allocator(self)

    def begin(self):
        """
        begin(MapInt self) -> std::map< std::string,unsigned int >::iterator

        1
        """
        return _libtypes.MapInt_begin(self)

    def end(self):
        """
        end(MapInt self) -> std::map< std::string,unsigned int >::iterator

        1
        """
        return _libtypes.MapInt_end(self)

    def rbegin(self):
        """
        rbegin(MapInt self) -> std::map< std::string,unsigned int >::reverse_iterator

        1
        """
        return _libtypes.MapInt_rbegin(self)

    def rend(self):
        """
        rend(MapInt self) -> std::map< std::string,unsigned int >::reverse_iterator

        1
        """
        return _libtypes.MapInt_rend(self)

    def count(self, *args):
        """
        count(MapInt self, std::map< std::string,unsigned int >::key_type const & x) -> std::map< std::string,unsigned int >::size_type

        1
        """
        return _libtypes.MapInt_count(self, *args)

    def erase(self, *args):
        """
        erase(MapInt self, std::map< std::string,unsigned int >::key_type const & x) -> std::map< std::string,unsigned int >::size_type
        erase(MapInt self, std::map< std::string,unsigned int >::iterator position)
        erase(MapInt self, std::map< std::string,unsigned int >::iterator first, std::map< std::string,unsigned int >::iterator last)

        1
        """
        return _libtypes.MapInt_erase(self, *args)

    def find(self, *args):
        """
        find(MapInt self, std::map< std::string,unsigned int >::key_type const & x) -> std::map< std::string,unsigned int >::iterator

        1
        """
        return _libtypes.MapInt_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(MapInt self, std::map< std::string,unsigned int >::key_type const & x) -> std::map< std::string,unsigned int >::iterator

        1
        """
        return _libtypes.MapInt_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(MapInt self, std::map< std::string,unsigned int >::key_type const & x) -> std::map< std::string,unsigned int >::iterator

        1
        """
        return _libtypes.MapInt_upper_bound(self, *args)

    __swig_destroy__ = _libtypes.delete_MapInt
    __del__ = lambda self : None;
MapInt_swigregister = _libtypes.MapInt_swigregister
MapInt_swigregister(MapInt)

# This file is compatible with both classic and new-style classes.


